{
  "hash": "ad7a38e99772601a8ae7450a38a879a9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to R\"\nsubtitle: \"Session 3\"\nauthor: \"\"\nfilters:\n  - diagram\ndiagram:\n  engine:\n    tikz:\n      header-includes:\n        - '\\usepackage{adjustbox,xcolor}'\n        - '\\usetikzlibrary{arrows, shapes}'\n        - '\\definecolor{UMdblue}{RGB}{0,28,61}'\n        - '\\definecolor{UMlblue}{RGB}{0,162,219}'\n        - '\\definecolor{UMorangered}{RGB}{232,78,16}'\n        - '\\definecolor{UMorange}{RGB}{243,148,37}'\n        - '\\definecolor{UMred}{RGB}{174,11,18}'\n---\n\n\n\n# Session Overview\n\n1.  [Functions in R](#functions)\n2.\t[Bonus: Looking Inside Functions](#functions2)\n3.  [Objects Revisited](#objects)\n4.\t[Packages](#packages)\n\n# Functions {#functions}\n\n## Functions\nWe have already encountered many *functions* in R:\n\n*Add examples based on previous sessions*\n\n## Function Overview\n<!-- To use TikZ, we need to install the following extension: -->\n<!-- quarto install extension pandoc-ext/diagram -->\n\nA function consists of three parts:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](IntroductionR_Session3_files/figure-revealjs/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n\n\n## Arguments\n\n- A function is called by specifying the function name followed by one or more comma-separated arguments in parentheses: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_name(argument1 = value1, argument2 = value2, ...)\n```\n:::\n\n\n\n-\tThis gives the same:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_name(argument2 = value2, argument1 = value1, ...)\n```\n:::\n\n\n\n-\tThis also gives the same:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_name(value1, value2, ...)\n```\n:::\n\n\n\n-\tThis does not!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_name(value2, value1, ...)\n```\n:::\n\n\n\n- Why?\n\n## More about Arguments\n\n- If you don't give argument names, R assumes arguments are given in the order as defined.\n\n- There are also default arguments, which do not always need to be specified.\n\n- Let us look at an example: calculating the logarithm using the `log` function:\n```{.r code-line-numbers=\"|2|3\"}\nfake_data <- c(1, 1, 2, 3, 5, 8, 13, 21)\nlog_exp_data <- log(fake_data)\t\t\t\t\t# <1>\nlog_2_data <- log(fake_data, base = 2)\t# <2>\n```\n\n1. Calculates the natural logarithm;\n\n2. Calculates the logarithm with base 2.\n\n## Understanding the log function\n\nExecute the command `?log`. It gives something like this:\n\n![](figures/help_log_all.png)\n\n## Understanding the log function\n\nExecute the command `?log`. It gives something like this:\n\n![](figures/help_log.png)\n\n## Understanding the log function\n\nExecute the command `?log`. It gives something like this:\n\n![](figures/help_log1.png)\n\n## Understanding the log function\n\nExecute the command `?log`. It gives something like this:\n\n![](figures/help_log2.png)\n\n## Understanding the log function\n\nExecute the command `?log`. It gives something like this:\n\n![](figures/help_log3.png)\n\n## Understanding the log function\n\nExecute the command `?log`. It gives something like this:\n\n![](figures/help_log4.png)\n\n## Understanding the log function\n\nExecute the command `?log`. It gives something like this:\n\n![](figures/help_log5.png)\n\n## Understanding the log function\n\nExecute the command `?log`. It gives something like this:\n\n![](figures/help_log6.png)\n\n## input and output of the log function\n\n- Note how the `log` function preserves the object type of the input:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfake_data <- c(1, 1, 2, 3, 5, 8, 13, 21)\nlog(fake_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.0000000 0.0000000 0.6931472 1.0986123 1.6094379 2.0794415 2.5649494\n[8] 3.0445224\n```\n\n\n:::\n\n```{.r .cell-code}\nfake_data_matrix <- matrix(fake_data, nrow = 4)\nlog(fake_data_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          [,1]     [,2]\n[1,] 0.0000000 1.609438\n[2,] 0.0000000 2.079442\n[3,] 0.6931472 2.564949\n[4,] 1.0986123 3.044522\n```\n\n\n:::\n:::\n\n\n\n\n## Exercise: Function Arguments\n\nThe function `rnorm()` can be used to simulate normally distributed data. The function `mean()` can be used to calculate the sample mean of the data, while the function `sd()` can be used to calculate the sample standard deviation. You will need to use the help files of these functions to complete the question.\n\n1. Simulate 100 numbers from a normal distribution with mean 0 and standard deviation 1 and store these in a vector called `x1`. Do this with the least amount of explicitly specified arguments as possible.\n\n2. Simulate 200 numbers from a normal distribution with mean 0 and standard deviation 5 and store these in a vector called `x2`. Do this with the least amount of explicitly specified arguments as possible.\n\n3. Simulate 80 numbers from a normal distribution with mean -6 and standard deviation 4 and store these in a vector called `x3`. Do this with the least amount of explicitly specified arguments as possible.\n\n4. Calculate the mean and standard deviation of each of the three series.\n\n5. Set the 10th value of `x1` to `NA`. Calculate the mean and standard deviation again. What do you observe? Learn from the help function how we can fix this.\n\n## The ... argument\n\n- If you opened the help function of `mean()` before, you saw the last argument is\n\n\n\"`...` &nbsp;&nbsp;&nbsp;&nbsp; further arguments passed to or from other methods\"\n\n\n\n- `...` is a special argument: it allows you to put in different arguments that are then passed on to an *other* function internally.\n\n- To know how to put them correctly, you may need to look at the *other function*; not always easy!\n\n- Since the function accepts any arguments in `...`, an error message will typically be given at a 'deeper level', which can be very confusing. Or you even may not get an error message at all.\n\n## Exercise: function arguments revisited\n\n1. Repeat the last part of the previous exercise, calculating the standard deviation for `x1`. Make sure to name the second argument of the function explicitly. Now intentionally misspell the name of the second argument and look at the error message.\n\n2. Now, do the same for calculating the mean; first do it correctly, then make an intentional mistake in the name of the argument.\n\n3. Can you explain the difference in results?\n\n## Exercise: plot president approval ratings\n\nThe dataset `presidents` contains US president approval ratings on a quarterly basis from 1945 to 1974. To visualise these approval ratings, we can use the `plot()` function. First, make a basic plot, then customise the plot in the following ways:\n\n1. The title of the X-axis should say 'Year', the title of the Y-axis 'Approval Rating'.\n\n2. Make the line blue. (Hint: specifying the colour literally as `\"blue\"` works, also note the cool effects in RStudio!)\n\n3. Make the tick marks appear on the inside of the figure rather than the outside. Even better, change the tick marks into grid lines. (This one is tricky!)\n\nYou will need to consult the help file for this exercise; see this therefrom more as an exercise in how to navigate R's help system, than an exercise in plotting (which we will cover in more detail later).\n\nYou may want to ask ChatGPT for help and then try to see if you could also have gotten the same answer yourself; it may not always give you the most straightforward answer though!\n\n<!-- plot(presidents, xlab = \"Year\", ylab = \"approval rating\", col=\"blue\", tck=0.05) -->\n\n## Useful functions: summary / descriptive statistics\n\n- often you want to have a quick look at your data. Here are some useful functions for this purpose:\n\n- For (numerical) vectors:\n\n| Function | Description |\n|--|--|\n| `length(v)` | Number of elements in $v$|\n|`max(v)` | Largest value in $v$|\n|`min(v)` | Smallest value in $v$|\n|`sum(v)` | Sum of the elements of $v$|\n|`prod(v)` | Product of the elements of $v$|\n|`mean(v)` | mean of the elements of $v$!\n|`sd(v)` | Standard deviation of the elements of $v$|\n\n## Useful functions: summary / descriptive statistics\n\n- Often you want to have a quick look at your data. Here are some useful functions for this purpose:\n\n- For matrices and data frames:\n\n| Function | Description |\n|--|--|\n|`nrow(D)` | Number of rows in $D$|\n|`ncol(D)` | Number of columns in $D$|\n|`head(D)` | Displays the first few rows of $D$|\n|`tail(D)` | Displays the last few rows of $D$|\n|`summary(D)` | Gives a summary of $D$|\n\n- For *numerical* matrices and data frames:\n\n| Function | Description |\n|--|--|\n|`colSums(D)` | Sum of the elements in each column of $D$|\n|`rowSums(D)` | Sum of the elements in each row of $D$|\n|`colMeans(D)` | Mean of the elements in each column of $D$|\n|`rowMeans(D)` | Mean of the elements in each row of $D$|\n\n# Bonus: Looking Inside Functions {#functions2}\n\n## Structure of functions\n\n- Functions in R have the following structure:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_name <- function(argument1, argument2 = default_value, ...) {\n  Function body           # the operations that the function should do\n  return(function_output) # the output to be returned by the function\n}\n```\n:::\n\n\n\n## A simple example function\n\n- This function converts miles to kilometres:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmiles_to_km <- function(miles = 1){\n  km <- 1.609344 * miles\n  return(km)\n}\n```\n:::\n\n\n\n- How many kilometres is 60 miles?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmiles_to_km(60)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 96.56064\n```\n\n\n:::\n:::\n\n\n\n- The default value of miles is set to one, so executing the function without argument, gives you how many kilometres is equal to 1 mile:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmiles_to_km()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.609344\n```\n\n\n:::\n:::\n\n\n\n## Multiple function outputs\n\n- R can only give one object as output.\n\n- if you have multiple outputs, you have to combine them in one object.\n\n- Often, the most natural choice for that is to use a *list*, as this can combine outputs of different nature.\n\n## An example function with multiple outputs\n\n- This function converts miles to kilometres and to metres:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmiles_to_metric <- function(miles = 1){\n  km_miles <- 1.609344 * miles\n  m_miles <- 1000 * km_miles\n  out <- list(km = km_miles, m = m_miles)\n  return(out)\n}\n```\n:::\n\n\n\n- How many (kilo)metres is 60 miles?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmiles_to_metric(60)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$km\n[1] 96.56064\n\n$m\n[1] 96560.64\n```\n\n\n:::\n:::\n\n\n\n\n## Why create your own functions?\n\n- You can perfectly get around R without ever creating your own functions.\n\n- But there are good reasons to do so:\n\n  + Easy if you need the same code repetitively;\n  \n  + Decreases the probability of making mistakes, as you only need to write that piece of code once;\n  \n  + You can use your functions in different script later on.\n  \n- Creating functions is a basic skill well worth investing in.\n\n- Note: make sure to first execute the lines containing your function before you use it (and execute again after an update to the code).\n\n## Exercise: create your own function\n\n1. Create a function that takes as input the `courses` data frame. The function output should be the total number of courses that use student tutors.\n  + There are many ways to count the number of courses that require student tutors. Probably the easiest is to directly do calculations with the logical values: `TRUE` is treated as 1, `FALSE` as 0:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(TRUE + FALSE, TRUE + TRUE, TRUE * FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 0\n```\n\n\n:::\n:::\n\n\n\n2. We now want to extend the function to give a second output. This output should contain a data frame with two columns: the first is the course code, the second is the number of tutorials for each course.\n  + The number of tutorials should be calculated as the number of students divided by the number of students per tutorial group, and then rounded up.\n  + The number of students per tutorial group should be a second argument of the function, with a default value of 15.\n  + To round up, we can use the function `ceiling()`.\n\n# Objects revisited {#objects}\n\n## Objects and Their Labels\n\nDiscussion how objects and classes are used for function output. How then functions appear to act differently on different types of objects (e.g. `plot()`).\n\n- Objects can be seen as a *package*: there is the actual *content*, and there is a *label* explaining the purpose of the object.\n\n![](figures/package.png){width=40%}\n\n- We can obtain the label from the function `class()`\n- Many functions act differently, depending on the class of the input.\n\n## The summary function\n\n- We can illustrate this using the `summary()` function.\n\n- Summary on vectors:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- rnorm(100)\nsummary(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-2.510194 -0.767664 -0.012163  0.008414  0.730881  2.709099 \n```\n\n\n:::\n:::\n\n\n\n## The summary function\n\n- Summary on data frames:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"data/courses.RData\")\nsummary(courses)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Course          Coordinator            Code          \n Length:30          Length:30          Length:30         \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n                  Programme  Period  Enrollments     StudentTutors  \n Econometrics          :10   1:5    Min.   : 57.00   Mode :logical  \n Economics             :10   2:6    1st Qu.: 65.75   FALSE:19       \n International Business:10   3:4    Median :290.00   TRUE :11       \n                             4:6    Mean   :292.17                  \n                             5:5    3rd Qu.:412.50                  \n                             6:4    Max.   :610.00                  \n```\n\n\n:::\n:::\n\n\n\n## The summary function\n\n- Similar ideas for functions such as `plot()`, `print()`, etc.\n\n- The output of summary is an object in itself:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsumm_x <- summary(x)\nclass(summ_x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"summaryDefault\" \"table\"         \n```\n\n\n:::\n:::\n\n\nIn terms of content, this is just a (named) vector.\n\n## Behind the Scenes: the function.class structure\n\n- Behind the scenes, R works as follows: \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](IntroductionR_Session3_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n\n## Behind the Scenes: the function.class structure\n\n- If you start typing the `summary()` function name in RStudio, you will see that there are actually many summary functions ...\n\n- ... among which `summary.data.frame()` and `summary.matrix()`\n\n- In principle, we need not bother with the system, but it can be useful to keep in mind for two cases:\n\n1. Help files and documentation may differ depending on classes.\n\n2. Applying it to an object for which the class function has not been defined (*\"Why does `summary()` not work on my object X?\"*).\n\n## Exercise 3.X: Using the plot function for different objects\n\n1. Remember your vector `x1` of normally distributed random variables created in Exercise 3.x\n\n2. Make a basic plot of this vector using the simple command `plot(x1)`.\n\n3. Now transform your vector `x1` into a time series object using the function `ts()`. Save it as `x1ts`.\n\n4. Make a plot of this new object using the command `plot(x1ts)`. Why does it look different from before?\n\n5. Make a plot of the variable `Period` from the `courses` data frame. Explain why this looks yet again different.\n\n# Packages {#packages}\n\n## Installing Packages\n\n- One of R's defining features is the richness of its package management system.\n\n- Installing packages is straightforward. But how do I know which package I need?\n\n- And how do packages function? Do they rely on other packages? Should I be bothered with this?\n\n- Let's have a deeper look.\n\n## Finding good packages\n\n- Sometimes packages come recommended in books or articles.\n\n- If not, do a Google or ChatGPT search: 'R package for reading Excel'; top search results are typically the most popular packages.\n\n- Unsure about the quality? Some advice:\n\n  + Consider the authors. Are they respected academics? Or have a good track record of developing packages? These are good signs.\n\n  + Read the manuals / help files. Do they make sense? Are they written by someone who understands the important aspects of the methods?\n\n  + Install and try them, and see if they match your expectations.\n \n## More about packages\n\n- Most of the time you need not need to be bothered by understanding the deeper meanings of the package, and you can just install it directly. But in case you do want to have a look, here are some things you can pay attention to.\n\n- 'Official' packages are hosted on the **Comprehensive R Archive Network (CRAN)**.\n\n- The package homepage can be found as **https://cran.r-project.org/package=package-name**\n\n- You can find the same info after installing a package by clicking on the package name, then on *'DESCRIPTION file'*.\n\n- Important fields:\n  + **Maintainer** & **Author**: especially helpful for specialised packages, for which you expect the authors to be experts in the field.\n  + **URL**: Is there dedicated documentation? What is the quality of the documentation (often correlates with the quality of the package)?\n  + **Imports**, **Depends** & **LinkingTo**: the packages needed to make the package work (installation is normally taken care of automatically).\n  + **Suggests**: packages that are not necessarily needed for using the package, but are needed for specific functionalities.\n\n## Checking out the bootUR package\n\n![](figures/Packages_RStudio.png){width=60%}\n\n## Checking out the bootUR package\n\n![](figures/bootUR_main){width=60%}\n\n## Checking out the bootUR package\n\n![](figures/bootUR2){width=60%}\n\n## Suggested packages\n\n- It is up to the author to decide what packages to suggest, and what packages to list as imports.\n\n- It is also up to the author to protect the user from strange error messages while not having installed a suggested package.\n\n- This is not always done properly!\n\n- Suggested packages are not always installed automatically!\n\n## Installing suggested packages\n\n- The command\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"package-name\")\n```\n:::\n\n\ndoes not install suggested packages. Use instead\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"package-name\", dependencies = TRUE)\n```\n:::\n\n\n\n- In RStudio, make sure that the box \"Install dependencies\" is checked.\n\n## Exercise: package information & installation\n\n1. Find out who the maintainer is of the package `bigtime`.\n\n2. Check if you have the suggested packages for `bootUR` installed. If you have `ggplot2` installed, remove it from your installation. (This can be done by clicking at the right spot in RStudio.)\n\n3. Install the package `bootUR` in the naive way using `install.packages(\"bootUR\")`.\n\n4. This package has a function to plot missing values in a time series dataset; apply this function to the data set that comes with the package. (This obviously implies you need to find both the function and the dataset.)\n\n5. You will get an error message. Fix the error and repeat the steps above to produce a plot of the missing values.\n\n## Installing packages from (other) source(s)\n\n- Sometimes you might find a package not available on CRAN, but hosted on different platforms, such as GitHub.\n\n- Such packages have to be installed from 'source'.\n\n- Occasionally, CRAN may also ask you if you want to install a package from source, if a newer version is available than the standard binary package.\n\n- Installing from source is problematic on Windows and Mac, as it requires the installation of additional software for packages that are built on C/C++/Fortran code that needs compilation (see e.g. `?install.packages` for details).\n\n- Advice for beginners: do not install from source!\n\n## Bonus exercise: installing packages from source\n\n::: {.callout-important}\nThis exercise should only be completed if you feel up for a challenge and want to get your system ready for installing from source.\n:::\n\n1. Go to [https://github.com/Marga8/HDGCvar](https://github.com/Marga8/HDGCvar) and follow the installation instructions to install the package `HDGCvar` from source. This should work on all systems.\n\n2. Go to [https://github.com/RobertAdamek/desla](https://github.com/RobertAdamek/desla) and follow the installation instructions to install the package `desla` from source.\n\n::: {.callout-caution}\nThis will most likely not work and result in errors.\n:::\n\n3. Go to [https://github.com/smeekes/bootUR](https://github.com/smeekes/bootUR) and read the extended installation instructions for installing from source. Install the missing software and then try to install the package `desla` again.\n\n::: {.callout-warning}\nOn Windows, this should be relatively safe, but on Mac things still can go wrong. Be warned.\n:::\n\n",
    "supporting": [
      "IntroductionR_Session3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}