{
  "hash": "9672ac58994baa540bd82c9adb5958fa",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to R\"\nsubtitle: \"Session 3\"\nauthor: \"fill presenter names here\"\nformat:\n  revealjs:\n    theme: \"theme.scss\"\n    transition: fade\n    background-transition: fade\n    highlight-style: ayu-mirage\n    fontsize: 1.5em\ncode-link: true\nexecute:\n  echo: true\n  freeze: auto\nfilters:\n  - diagram\ndiagram:\n  header-includes: |\n    \\usetikzlibrary{arrows,shapes.geometric,patterns,decorations.pathreplacing,quotes}\n    \\definecolor{UMdblue}{RGB}{0,28,61}\n    \\definecolor{UMlblue}{RGB}{0,162,219}\n    \\definecolor{UMorangered}{RGB}{232,78,16}\n    \\definecolor{UMorange}{RGB}{243,148,37}\n    \\definecolor{UMred}{RGB}{174,11,18}\n\n---\n\n\n\n# Course Overview\n\n1.  [Functions in R](#functions)\n2.\t[Bonus: Looking Inside Functions](#functions2)\n3.  [Objects Revisited](#objects)\n4.\t[Packages](#packages)\n\n# Functions\n\n## Functions\nWe have already encountered many *functions* in R:\n\n*Add examples based on previous sessions*\n\n## Function Overview\n\nA function consists of three parts:\n\n\n\n::: {.cell}\n\n```{.tex .cell-code}\n\\begin{tikzpicture}[every node/.style={draw, minimum size=2cm}]\n\\node[align=center] (x2) at (0,0) {\\huge$x_{t-2}$};\n\\node[align=center] (z1) at (5,0) {\\huge$z_{t-1}$};\n\\node[align=center] (y0) at (10,0) {\\huge$y_{t}$};\n\\draw [->, line width=0.2cm] (x2) to (z1);\n\\draw [->, line width=0.2cm] (z1) to (y0);\n\\end{tikzpicture}\n```\n\n\n::: {.cell-output-display}\n![](IntroductionR_Session3_files/figure-revealjs/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n\n\n## Arguments\n\n-   A function is called by specifying the function name followed by one or more comma-separated arguments in parentheses: `function_name(argument1 = value1, argument2 = value2,...)`\n\n-   Argument names do not always need to be specified: `function_name(value1, value2,...)`\n\n-   Attention: Order matters!\n\n-   There are also default arguments, which do not always need to be specified. More on this later.\n\n## Extending R with Packages\n\nThere are many packages available on [CRAN](https://cran.r-project.org/) for various applications. These allow for expanding the relatively small core system of R. While R comes with some standard packages, many need to be installed separately.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"AER\")  # Install a previously unavailable package\nlibrary(AER)             # Load the package (makes objects \n                         # in the package visible in the\n                         # global namespace)\ndata(CASchools)          # Example dataset \"CASchools\"\n?ivreg                   # Help for function ivreg\n```\n:::\n\n\n\n-   `search()` shows the search path, i.e., which packages are already loaded:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\" \n[4] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n[7] \"package:methods\"   \"Autoloads\"         \"package:base\"     \n```\n\n\n:::\n:::\n\n\n\n\n## Lists\n\nVectors, matrices, and arrays require all elements to be of the same data type. Lists, however, are more general as they allow arbitrary combinations of data types. A list is created using the `list()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL1 <- list(\n  a = 1:3,\n  A = matrix(1:9,3,3),\n  w = \"Hello!\"        # Elements can have names AND be of any type!\n)\n```\n:::\n\n\n\nLists can also contain other lists:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL2 <- list(\n  a = 1:3,\n  l1 = L1 # List within a list\n)\n```\n:::\n\n\n\n## Lists\n\nLists are indexed using double square brackets (numeric, logical, by name):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL1[[1]]    # 1,2,3     -> Vector\nL1[1]      # list(1:3) -> Still a list (sublist of L1)\nL1[[\"w\"]]  # \"Hello!\"\n```\n:::\n\n\n\nNamed lists can also be accessed using the `$` operator:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL1$w       # \"Hello!\"\n```\n:::\n\n\n\n## Recursion\n\nSometimes quite useful: recursive functions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactorial <- function(n){\n  if (n<0) stop(\"Factorial only for positive integers\")\n\n  if (n<2) return(1)\n\n  n * factorial(n-1)\n}\n```\n:::\n",
    "supporting": [
      "IntroductionR_Session3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}