{
  "hash": "7171964cdee3c5c88f90c9d237854ae3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to R\"\nsubtitle: \"Session 1\"\nauthor: \"\"\nfilters:\n  - diagram\ndiagram:\n  engine:\n    tikz:\n      header-includes:\n        - '\\usepackage{adjustbox,xcolor}'\n        - '\\usetikzlibrary{arrows, shapes}'\n        - '\\definecolor{UMdblue}{RGB}{0,28,61}'\n        - '\\definecolor{UMlblue}{RGB}{0,162,219}'\n        - '\\definecolor{UMorangered}{RGB}{232,78,16}'\n        - '\\definecolor{UMorange}{RGB}{243,148,37}'\n        - '\\definecolor{UMred}{RGB}{174,11,18}'\n---\n\n\n\n# Session Overview\n\n1.  [What is R?](#what-is-R)\n2.  [Installing R](#install-R)\n3.\t[First Steps in R](#open-R)\n4.  [What is RStudio?](#what-is-RStudio)\n5.  [Installing RStudio](#install-RStudio)\n6.\t[First Steps in RStudio](#open-Rstudio)\n7.\t[R Script](#R-script)\n8.\t[R Help](#R-help)\n9.\t[R Package Management System](#R-packages)\n\n# What is R? {#what-is-R}\n\n## What is R?\n\n**R** \n\n- is an open-source statistical programming language. \n- available for most operating systems\n- helps users analyze, visualize, and model data—from simple summaries to complex data analysis\n- is extremely popular in statistics and data science, see [this article](http://r4stats.com/articles/popularity/)\n- includes thousands of packages (add-ons) that can be used for \nspecialized tasks without a deep understanding of the language and programming skills\n- allows for extensive programming, making it also suitable for advanced or case-specific applications of statistical methods\n\nThe combination of the latter two aspects sets **R** apart and makes it useful for everything ranging from standard 'basic' statistical analysis to the development of new methods.\n\nThe homepage of **R** is [www.r-project.org](www.r-project.org) from which you can install **R** and access manuals that provide detailed information about installing and using **R**.\n\n\n# Installing R {#install-R}\n\n## R Installation\nTo install **R**, go to the Comprehensive R Archive Network [CRAN](https://cran.r-project.org/). At the time of writing, it looks as follows:\n\n![](figures/website-R-1.png)\n\n\n## R Installation\nTo download, for instance, **R** for Windows, you arrive at the following page:\n\n![](figures/website-R-2.png)\n\n## R Installation\nNow download the latest version of **R** (version 4.5.0 at the time of writing):\n\n![](figures/website-R-3.png)\n\n## R Installation\nStart the download process:\n\n![](figures/download-R-1.png)\n\n## R Installation\nContinue the download process:\n\n![](figures/download-R-2.png)\n\n## R Installation\nDownload completed:\n\n![](figures/download-R-3.png)\n\n# First Steps in R {#open-R}\n\n## Opening R\n\nOpen **R**, you should see the following:\n\n![](figures/open-R-1.png)\n\n## Opening R\n\nThe program window provides some basic information on **R** and the installed version.  \n\nCheck your version of **R**!\n\n![](figures/open-R-2.png)\n\n## R Console\n\nThe **R** Console can be used to directly give in commands and display output:\n\n![](figures/R-console-1.png)\n\n## R Prompt\n\nUnder the default information, you can see the **R** prompt, through which **R** indicates that it is ready to execute a new command.\n\n![](figures/R-console-2.png)\n\n## Executing your first command\n\nStart by using **R** as a simple calculator, try to enter after the **R** prompt:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+3\n```\n:::\n\n\nand hit <em>enter</em>.\n\nYou will see that **R** directly returns the output in the **R** console next to the '[1]': \n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\nIf you want to re-execute your previous command, use the arrow key <em>↑</em>. To make changes to a command, you can use the <em>←, →</em> arrows and re-execute. To move to the next command, use the  <em>↓</em> arrow.\n\nFinally, when **R** receives an incomplete expression such as \n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+\n```\n:::\n\n\n**R** will return the <em>+</em> symbol, thereby letting you know that you forgot to type something. You can either complete the command and then hit <em>enter</em> or exit the incomplete command via the <em>esc</em> button.\n\n\n## Exercises in R\n\nEnter the following expressions, one by one, in **R** and hit <em>enter</em> to see how **R** evaluates them:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 3*4\n\n(2 + 3)*4\n\n(2 + 3*4\n\nsqrt(4)\n\npi\n```\n:::\n\n\n\n## From R to Rstudio\n\nAfter taking your first steps in **R**, you might not be impressed by the design of the user interface and the way the software is used. \n\nThere are various user interfaces that work on top of plain **R** to make it more user friendly. A very popular one is **RStudio**.\n\n\n# What is RStudio? {#what-is-RStudio}\n\n## What is RStudio?\n\n**RStudio**\n\n- is an Integrated Development Environment (IDE) for **R**\n\n- is a user-friendly interface for writing and running **R** code\n\n- makes it easier to write code, analyze data, create visuals, access documentation and manage projects\n\nIts homepage is [https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/)\n\n# Installing RStudio {#install-RStudio}\n\n## RStudio Installation\n\nTo download **RStudio**, go to its [download](https://posit.co/download/rstudio-desktop/) page. At the time of writing, it looks as follows:\n\n![](figures/website-RStudio-1.png)\n\n## RStudio Installation\nStart the download process:\n\n![](figures/download-RStudio-1.png)\n\n# First Steps in RStudio {#open-RStudio}\n\n\n## Opening RStudio\n\nOpen **RStudio**, you should see the following:\n\n![](figures/open-RStudio-1.png)\n\n## Opening RStudio\n\nYou will recognize the **R** Console and see that **RStudio** is ready to receive input:\n\n![](figures/open-RStudio-2.png)\n\n\n## Exercises in RStudio\n\nRe-execute the commands you executed before in **R** now in the **R** Console of **RStudio**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 3*4\n\n(2 + 3)*4\n\n(2 + 3*4\n\nsqrt(4)\n\npi\n```\n:::\n\n\n\nThe console in **RStudio** behaves exactly the same as the plain **R** window!\n\n## Structure in RStudio\n\nBut **RStudio** has much more to offer than plain **R**!\n\n**RStudio** (unlike **R**) is structured in different windows. You should currently see 3 windows:\n\n- Left: **R** console\n- Top right: Display of objects in the global environment\n- Bottom right: Files, plots, packages, help, etc.\n\n## RStudio Windows\n\nThe 3 main windows (aka panes) in **RStudio**:\n\n![](figures/open-RStudio-3.png)\n\n## RStudio Menu Bar\n\n**RStudio** also has a Menu bar at the top:\n\n![](figures/open-RStudio-4.png)\n\nThe usefulness of these windows and menu bar in **RStudio** will become clear throughout this training.\n\n\n## Exercises in RStudio\n \nExplore the following quick tricks that the console in **RStudio** offers. After the prompt:\n\n- press the <em>ctrl</em> button on Windows, or the <em>command</em> on Mac together with the arrow key <em>↑</em>. What do you see?\n\nIt should give you a list of all previously executed commands. You can then use the <em>↑</em> and <em>↓</em> arrow keys to directly move to a certain command to repeat or correct it. \n\n- start to write sq and then hit the tabulator (tab) key <em>⇆</em>\nright after without an additional space. What do you see?\n\nIt should present you with a list of suggested commands together with a short description. You can then use the <em>↑</em> and <em>↓</em> arrow keys to navigate through them. Which one is the relevant one to compute the square root of a number? Choose the appropriate function, then hit <em>enter</em> to compute the square root of 100. \n\n## Need for R Scripts\nSuppose you want to continue your work tomorrow. If you would now close **RStudio**, all of your work would be gone!\n\nTo avoid this problem, we will not give commands directly in the **R** console, but save them in an **R** Script.\n\n\n# R Script {#R-script}\n\n## What is an R Script?\n\nWhile many simple calculations can be done using the command line, as soon as things get more complicated, scripts should be used.\n\nAn **R** Script\n\n- is a plain text file that contains a collection of **R** commands\n\n- is written in such a form to perform commands in a step by step fashion\n\n- contains all commands including those for importing data, analyzing data, visualizing data or other tasks\n\n- can be saved as a .R file \n\n- allows you to automate and reproduce your work, allowing you to run the same analysis without having to redo each step manually again\n\n- makes your work organized, shareable and transparent!\n\n\n## Creating an R Script\n\nCreating an **R** Script is easy. \n\nUsing the menu bar, go to <em>File</em>, <em>New File</em>, <em>R Script</em>:\n\n![](figures/R-script-1.png)\n\nAlternatively, you could have used the shortcut <em>ctrl+shift+N</em> on Windows or <em>command+shift+N</em> on Mac.\n\n## Structure in RStudio\n\nRStudio now displays 4 windows, with the **R** Script currently displayed in the top left:\n\n![](figures/R-script-2.png)\n\n## R Script\n\nCurrently the **R** Script is Untitled, we should give it a name. \n\n![](figures/R-script-3.png)\n\n## Exercise Saving R Scripts\n\nGive your R Script a name and save it. Go to <em>File</em>, <em>Save As...</em>:\n\n![](figures/R-script-4.png)\n\n## R Working Directory\n\nBefore we start working in our R Script, let us first set the working directory in **R**.\n\nThe working directory is the location on your computer where **R** will read and save files. Go to <em>Session</em>, <em>Set Working Directory</em>. Two convenient options are:  \n\n- <em>Choose Directory...</em>: Choose the directory yourself\n\n- <em>To Source File Location</em>: Set the working directory to the directory where your **R** Script (the source file) is saved\n\n![](figures/R-script-5.png)\n\n\n\n## R Working Directory\n\nSelect the option to set the working directory to the source file location. You will see that a command automatically pops up in the R console, something like:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"C:/Rtraining\")\n```\n:::\n\n\n\nYou can use this command directly next time. Mind the usage of the  <em>/</em> when specifying the path of your working directory!\n\n\nYou can also include comment lines in your **R** script. These start with the symbol <em>#</em> and allow you to document your code. For instance:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Setting my working directory\nsetwd(\"C:/Rtraining\")\n```\n:::\n\n\n\n\n## Exercise R Script\nCopy some of the commands you previously executed into your **R** Script. \n\nExecute a specific line\n\n-  by pressing the <em>Run</em> button to execute the line on which your cursor is currently located\n\n- by using <em>ctrl+enter</em> on Windows or <em>command+enter</em>  on Mac to execute the line on which your cursor is currently located\n\n![](figures/R-script-6.png)\n\nYou can execute multiple lines by highlighting them all and doing one of the above. Try this\n\n\n\n## Exercise R Panes\nYou can adjust the sizes and positioning of the windows (panes) according to your liking. \n\nGo to <em>Tools</em>, <em>Global Options...</em> and then select <em>Pane Layout</em> from which you can adjust the positioning of each of the 4 panes by selecting them from the drop-down menus\n\n![](figures/R-script-7.png)\n\nExperiment with a different positioning and re-adjust  according to your liking.\n\n# R Package Management System {#R-packages}\n\n## R Package Management System\n\nUntil now, we have  explored some basic functionality in **R**. But much of the functionality of **R** is extended by its big and active community.\n\nThese extensions are called **R** packages\n\n## What are R packages?\n\n**R** packages\n\n- are constantly developed and adjusted by the large user community making many state-of-the-art methods quickly available\n\n- can be installed for just about everything you want to do in statistics and data science\n\n- offer pre-defined functions which makes it possible to use **R** without a deep understanding of the language and programming skills.\n\n\n## Overview of R packages\n\nThe standard distribution of **R** comes already with a number of packages. \n\nA list of the currently installed packages can be obtained from the <em>Packages</em> window in the bottom right window below\n\n![](figures/R-package-1.png)\n\nYou can install new packages depending on your needs\n\n## Installing R packages\n\nTo install a new **R** package,  click on the <em>Install</em> button at the top of the <em>Packages</em> window.\n\nYou can then type the name of the **R** package you want to install. Let us install the package **this.path**\n\n![](figures/R-package-2.png)\n\nYou will notice that **R** has automatically put the following command in the console:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"this.path\")\n```\n:::\n\n\n\nYou can use this **R** code also directly to install a package. The package is now added to to your package list and ready to be used.\n\n## Loading R package\n\nInstalling an **R** package as we just did, only needs to be done once. \n\nYet each time you want to use the functionality of the **R** package in your current **R** session, you need to activate it. You can do this via the following command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(this.path)\n```\n:::\n\n\n\nAfter activating the package nothing immediately happens, but **R** simply has access to the functionality that the **this.path** offers.\n\n## Exercise R package\n\nWhy did we install the **this.path** package? Because it offers functionality to  set your working directory, as an alternative to the Menu-based approach we say before.\n\nTo set the working directory to the folder where your current **R** script is located, you can simply use:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(this.path) # Load the library each time you use the command below\nsetwd(dirname(this.path::this.path()))\n```\n:::\n\n\nIt may be convenient to enter this at the top of your **R** script to ensure that you are always working in the directory where your **R** Script is located without having to type the name of the path!\n\n# R Help {#R-help}\n\n## What are R help pages?\n**R** help pages\n\n- provide detailed descriptions, arguments, return values, etc. for **R** packages, functions\n\n- include usage examples that demonstrate how to use the function effectively\n\n- are directly accessible in **RStudio**\n\n\n## R Help\nHelp files are displayed in the <em>Help</em> window in the bottom right window below\n\n![](figures/R-help-1.png)\n\n## Accessing R Help\nTo access an **R** help page for an **R** package, for instance the package **this.path**, you can use\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(package='this.path')\n```\n:::\n\n\n\n![](figures/R-help-2.png)\n\n## Accessing R Help\n\nTo open the help file for a specific **R** function, for instance the function this.path, you can use either of the following two commands:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(this.path)\n?this.path\n```\n:::\n\n\n\nBoth commands above to the  same: they open the help file of the function you specified. \nNote that **R**  searches for an **exact**! match and will only open the **R** Help page if the function exists. \n\n\n\n## Exercise R Help\n\n- What happens if you execute the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?this.path\n```\n:::\n\n\n\n**R** should open the help page for the function with name this.path. No need to go over the help page in detail, you will explore the content of **R** Help pages during later sessions!\n\n- What happens if you execute the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?thispath\n```\n:::\n\n\n\n**R** should tell you that no documentation for the requested function exists. It did not find an **exact** match to the function thispath!  It does give you a recommendation to try something instead...\n\n- What happens if you try this recommendation, namely:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n??thispath\n```\n:::\n\n\n\n**R** performs a full-text search of the help system for all documentation that mentions the term thispath (or something alike)\n\n\nWhile the search with the command <em>?</em> is thus useful to directly access the help page of an **R** function you know exists, the broader help search with the command <em>??</em> is useful if you are not sure about the exact name of a function.\n\n\n\n\n",
    "supporting": [
      "IntroductionR_Session1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}