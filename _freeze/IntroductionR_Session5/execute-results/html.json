{
  "hash": "a083e6a9e636ae89ff67560d5e875837",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to R\"\nsubtitle: \"Session 5\"\nauthor: \"\"\nfilters:\n  - diagram\ndiagram:\n  engine:\n    tikz:\n      header-includes:\n        - '\\usepackage{adjustbox,xcolor}'\n        - '\\usetikzlibrary{arrows, shapes}'\n        - '\\definecolor{UMdblue}{RGB}{0,28,61}'\n        - '\\definecolor{UMlblue}{RGB}{0,162,219}'\n        - '\\definecolor{UMorangered}{RGB}{232,78,16}'\n        - '\\definecolor{UMorange}{RGB}{243,148,37}'\n        - '\\definecolor{UMred}{RGB}{174,11,18}'\n---\n\n\n\n\n\n# Session Overview\n\n1.  [Basics of data manipulation](#dataman1)\n2.\t[Bonus: Data manipulation and tidyverse](#dataman2)\n3.  [Regression analysis](#reg1)\n\n# Basics of data manipulation {#dataman1}\n\n## Data manipulation\nIn the last session, we learned how to load data of various sources into R. \n\nToday's session will be about how to manipulate data in R. Importantly, we will learn how to\n\n- select certain variables from a data \n- subset a data set\n- order data \n- recode and rename certain variables\n- add new information to a data set \n- reshape data\n- compute summary statistics \n\n\nWe will work with the climate data set for the Netherlands in long format\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_cli <- read.table(\"https://raw.githubusercontent.com/tobiashartl/Rprogramming_UM/main/data/climate.csv\", \n                       header = TRUE, sep = \",\", stringsAsFactors = FALSE)\n```\n:::\n\n\n\n\n## Data manipulation: Select 1\nWe begin with selecting interesting variables from a data set while dropping irrelevant ones. For our climate data set, we want to preserve information about `date`, `location`, and `temperature`, and drop all other information. \n\nApproach #1: Selecting by variable names\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data_cli[, c(\"YEARMODA\", \"NAME\", \"TEMP\")] \nhead(data, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    YEARMODA     NAME TEMP\n1 2000-01-01 SCHIPHOL  6.4\n2 2000-01-02 SCHIPHOL  7.2\n3 2000-01-03 SCHIPHOL  8.7\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(data, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         YEARMODA       NAME TEMP\n100152 2024-12-29 MAASTRICHT  0.2\n100153 2024-12-30 MAASTRICHT  1.7\n100154 2024-12-31 MAASTRICHT  1.4\n```\n\n\n:::\n:::\n\n\n\n\n## Data manipulation: Select 2\nAs an alternative, we could also \n\n- call the column indexes \n- use negative indexing \n- use subset()\n\nApproach #2: Selecting by variable indexes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1 <- data_cli[, c(14, 3, 19)] \n\n# check\nidentical(data, data1) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n## Data manipulation: Select 3\nApproach #3: Selecting by subset()\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata3 <- subset(data_cli, select = c(YEARMODA, NAME, TEMP))\n\n# check\nidentical(data, data3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n## Data manipulation: Subsetting rows 1\nNext, we want to subset the data set, i.e. preserve interesting rows while dropping irrelevant ones. For the climate data set, we might be interested in information about Maastricht in 2024 only. \n\nApproach #1: Logical row indexing\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# select data from 2024-01-01 on only\ndata <- data_cli[data_cli$YEARMODA >= as.Date(\"2024-01-01\"), ]\n# select data until 2024-12-31\ndata <- data[data$YEARMODA <= as.Date(\"2024-12-31\"), ]\n# select Maastricht only\ndata <- data[data$NAME == \"MAASTRICHT\", ]\n\nhead(data[, c(\"YEARMODA\", \"NAME\", \"TEMP\")], 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        YEARMODA       NAME TEMP\n99800 2024-01-01 MAASTRICHT  7.0\n99801 2024-01-02 MAASTRICHT  9.7\n99802 2024-01-03 MAASTRICHT  9.7\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(data[, c(\"YEARMODA\", \"NAME\", \"TEMP\")], 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         YEARMODA       NAME TEMP\n100152 2024-12-29 MAASTRICHT  0.2\n100153 2024-12-30 MAASTRICHT  1.7\n100154 2024-12-31 MAASTRICHT  1.4\n```\n\n\n:::\n:::\n\n\n\n## Data manipulation: Subsetting rows 2\nApproach #2: subset()\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2 <- subset(data_cli, YEARMODA >= as.Date(\"2024-01-01\") &\n\t\t\t\t\t\t  YEARMODA <= as.Date(\"2024-12-31\") &\n\t\t\t\t\t\t  NAME == \"MAASTRICHT\")\n\nidentical(data, data2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\nApproach #3: which()\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata3 <- data_cli[which(data_cli$YEARMODA >= as.Date(\"2024-01-01\") & \n\t\t\t\t\t    data_cli$YEARMODA <= as.Date(\"2024-12-31\") & \n\t\t\t\t\t\tdata_cli$NAME == \"MAASTRICHT\"), ]\n\nidentical(data, data3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n## Data manipulation: Sorting data 1\nOften we want to order / sort data. Two functions will be helpful here:\n\n- `order()` returns the indices that would sort the data (ascendingly, descendingly)\n- `sort()` is available for vectors only, and returns the sorted vector. \n\n## Data manipulation: Sorting data 2\nFor our climate data set, suppose we want to sort the data by time (instead of by location). \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# sort: returns a sorted vector\ndata_cli$YEARMODA[1:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"2000-01-01\" \"2000-01-02\" \"2000-01-03\" \"2000-01-04\" \"2000-01-05\"\n [6] \"2000-01-06\" \"2000-01-07\" \"2000-01-08\" \"2000-01-09\" \"2000-01-10\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsort(data_cli$YEARMODA)[1:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"2000-01-01\" \"2000-01-01\" \"2000-01-01\" \"2000-01-01\" \"2000-01-01\"\n [6] \"2000-01-01\" \"2000-01-01\" \"2000-01-01\" \"2000-01-01\" \"2000-01-01\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# order: returns the indices that would sort the data\norder(data_cli$YEARMODA)[1:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]    1  367  733 1098 1454 1820 2186 2552 2918 3284\n```\n\n\n:::\n\n```{.r .cell-code}\ndata_cli_ord <- data_cli[order(data_cli$YEARMODA), ]\nhead(data_cli_ord[, c(\"YEARMODA\", \"NAME\", \"TEMP\")], 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      YEARMODA     NAME TEMP\n1   2000-01-01 SCHIPHOL  6.4\n367 2000-01-01  DE BILT  6.0\n733 2000-01-01 LELYSTAD  4.9\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Task 5.1\n\nUse the long-format climate [data set](https://raw.githubusercontent.com/tobiashartl/Rprogramming_UM/main/data/climate.csv).\n\n1. Generate a data set that contains information about precipitation (`PRCP`), temperature (`TEMP`) for all days and locations of the original data set.\n\n2. Reduce the information to the year 2020 and the locations Eelde, De Bilt, and Maastricht.\n\n3. Sort the data by time (ascendingly) and location (alphabetically) first, and then by temperature (ascendingly). When and where was the highest temperature observed?\n\n\n\n\n\n\n\n\n\n## Data manipulation: Adding information 1\nSometimes we want to transform data or add information. For instance, we could be interested in whether it was raining on a certain day in a certain city (i.e. `PRCP` is positive)\n\nTo add a new variable `RAIN` to a data.frame, use the `$` operator\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate a logical value that is TRUE if percipitation > 0, else FALSE\ndata_cli$RAIN <- (data_cli$PRCP > 0)\n\nhead(data_cli[, c(\"YEARMODA\", \"RAIN\")], 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    YEARMODA RAIN\n1 2000-01-01 TRUE\n2 2000-01-02 TRUE\n3 2000-01-03 TRUE\n```\n\n\n:::\n:::\n\n\n\n## Data manipulation: Adding information 2\nAs an alternative, we can also use the bracket notation\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_cli[, \"RAIN\"] <- (data_cli$PRCP > 0)\n```\n:::\n\n\n\nMoreover, sometimes we want to transform data. As an example, add temperature in Kelvin to the data set. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_cli[, \"temp_k\"] <- data_cli[, \"TEMP\"] + 273.15\nhead(data_cli[, c(\"YEARMODA\", \"RAIN\", \"NAME\", \"TEMP\", \"temp_k\")], 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    YEARMODA RAIN     NAME TEMP temp_k\n1 2000-01-01 TRUE SCHIPHOL  6.4 279.55\n2 2000-01-02 TRUE SCHIPHOL  7.2 280.35\n3 2000-01-03 TRUE SCHIPHOL  8.7 281.85\n```\n\n\n:::\n:::\n\n\n\n\n## Data manipulation: Adding information 3\nBesides adding columns, we can also expand our data set by adding further rows to the data. Suppose we observe additional data for Leuven. We can then extend our data set to include the new information using the `rbind()` command.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data for Leuven\ndata_leuven <- read.table(\"https://raw.githubusercontent.com/tobiashartl/Rprogramming_UM/main/data/climate_leuven.csv\", \n                       header = TRUE, sep = \",\", stringsAsFactors = FALSE)\n\n# join the two data sets \ndata_new <- rbind(data_cli, data_leuven)\n```\n:::\n\n\n\n## Data manipulation: Adding information 4\nSometimes we want to change the class of a variable: for instance, we want to make sure that `YEARMODA` indeed is a Date-variable, whereas `NAME` is a factor\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# split the data set\ndata_cli$NAME <- as.factor(data_cli$NAME)\ndata_cli$YEARMODA <- as.Date(data_cli$YEARMODA)\n```\n:::\n\n\n\n\n## Data manipulation: Reshaping data 1\nIf we want to generate a new data.frame, we can collect the relevat information via the `data.frame()` function: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# split the data set\ndata_cli_new <- data.frame(date = as.Date(data_cli$YEARMODA),\n\t\t\t\t\t\t   location = as.factor(data_cli$NAME), \n\t\t\t\t\t\t   temp = as.numeric(data_cli$TEMP))\nhead(data_cli_new)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        date location temp\n1 2000-01-01 SCHIPHOL  6.4\n2 2000-01-02 SCHIPHOL  7.2\n3 2000-01-03 SCHIPHOL  8.7\n4 2000-01-04 SCHIPHOL  6.0\n5 2000-01-05 SCHIPHOL  4.7\n6 2000-01-06 SCHIPHOL  7.1\n```\n\n\n:::\n:::\n\n\n\n\n## Data manipulation: Reshaping data 2\nMoreover, we sometimes prefer to have data in wide format. This can be achieved by using the `reshape()` function. The example below generates a wide data set with temperature data along different stations. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# split the data set\ndata_cli_new_wide <- reshape(data_cli_new, timevar = \"location\", \n\t\t\t\t\t\t     idvar =\"date\", direction = \"wide\")\n\nhead(data_cli_new_wide[, c(1, 2, 3, 4)])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        date temp.SCHIPHOL temp.DE BILT temp.LELYSTAD\n1 2000-01-01           6.4          6.0           4.9\n2 2000-01-02           7.2          7.2           6.2\n3 2000-01-03           8.7          8.4           8.5\n4 2000-01-04           6.0          6.6           5.8\n5 2000-01-05           4.7          4.4           4.2\n6 2000-01-06           7.1          7.2           6.8\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Data manipulation: Computing summary statistics 1\nFor exploratory data analysis, we are interested in computing (conditional and unconditional) summary statistics. In principle, the function `summary()` already gives us an overview about the data. \n\nExample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# split the data set\nsummary(data_cli_new)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      date                   location          temp      \n Min.   :2000-01-01   SCHIPHOL   : 9121   Min.   :-16.9  \n 1st Qu.:2006-04-02   MAASTRICHT : 9119   1st Qu.:  6.2  \n Median :2012-06-27   EELDE      : 9118   Median : 10.9  \n Mean   :2012-06-28   ROTTERDAM  : 9118   Mean   : 10.8  \n 3rd Qu.:2018-09-25   EINDHOVEN  : 9117   3rd Qu.: 15.7  \n Max.   :2024-12-31   GILZE RIJEN: 9106   Max.   : 31.0  \n                      (Other)    :45455                  \n```\n\n\n:::\n:::\n\n\n\n\n## Data manipulation: Computing summary statistics 2\nOften we are interested in computing summary statistics along certain groups: For instance, we could be interested in the average temperature for each station and year. Here, the `aggregate` function allows to execute functions along groups.\n\nExample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# generate a new variable `year``\ndata_cli_new$year <- format(as.Date(data_cli_new$date), \"%Y\")\n# average temperature per year\naggregate(temp ~ year, data = data_cli_new, FUN = mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   year      temp\n1  2000 10.816733\n2  2001 10.320060\n3  2002 10.679608\n4  2003 10.452584\n5  2004 10.265572\n6  2005 10.587198\n7  2006 11.070439\n8  2007 11.066152\n9  2008 10.445427\n10 2009 10.410302\n11 2010  9.000897\n12 2011 10.824981\n13 2012 10.184042\n14 2013  9.746233\n15 2014 11.600448\n16 2015 10.817018\n17 2016 10.643574\n18 2017 10.923928\n19 2018 11.453566\n20 2019 11.222017\n21 2020 11.673621\n22 2021 10.499749\n23 2022 11.653900\n24 2023 11.769240\n25 2024 11.820456\n```\n\n\n:::\n:::\n\n\n\n\n## Data manipulation: Computing summary statistics 3\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# average temperature per station\naggregate(temp ~ location, data = data_cli_new, FUN = mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      location     temp\n1      DE BILT 10.85676\n2       DEELEN 10.52035\n3        EELDE 10.17615\n4    EINDHOVEN 11.08124\n5  GILZE RIJEN 11.00421\n6     LELYSTAD 10.60002\n7   MAASTRICHT 11.05955\n8    ROTTERDAM 11.13035\n9     SCHIPHOL 11.05968\n10     TWENTHE 10.43557\n11      VOLKEL 10.84123\n```\n\n\n:::\n:::\n\n\n\n## Data manipulation: Computing summary statistics 4\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# average temperature per station and year\naggregate(temp ~ location + year, data = data_cli_new, FUN = mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       location year      temp\n1       DE BILT 2000 10.902732\n2        DEELEN 2000 10.548876\n3         EELDE 2000 10.265574\n4     EINDHOVEN 2000 11.050273\n5   GILZE RIJEN 2000 10.920492\n6      LELYSTAD 2000 10.632055\n7    MAASTRICHT 2000 11.165847\n8     ROTTERDAM 2000 11.126230\n9      SCHIPHOL 2000 11.027322\n10      TWENTHE 2000 10.577049\n11       VOLKEL 2000 10.759003\n12      DE BILT 2001 10.399726\n13       DEELEN 2001 10.181616\n14        EELDE 2001  9.637808\n15    EINDHOVEN 2001 10.505205\n16  GILZE RIJEN 2001 10.455890\n17     LELYSTAD 2001 10.220386\n18   MAASTRICHT 2001 10.603014\n19    ROTTERDAM 2001 10.642033\n20     SCHIPHOL 2001 10.641370\n21      TWENTHE 2001  9.912329\n22       VOLKEL 2001 10.319328\n23      DE BILT 2002 10.730137\n24       DEELEN 2002 10.469780\n25        EELDE 2002 10.120548\n26    EINDHOVEN 2002 10.990685\n27  GILZE RIJEN 2002 10.930618\n28     LELYSTAD 2002 10.188889\n29   MAASTRICHT 2002 11.133973\n30    ROTTERDAM 2002 11.046027\n31     SCHIPHOL 2002 10.960000\n32      TWENTHE 2002 10.249724\n33       VOLKEL 2002 10.637883\n34      DE BILT 2003 10.378356\n35       DEELEN 2003 10.299452\n36        EELDE 2003  9.722253\n37    EINDHOVEN 2003 10.810411\n38  GILZE RIJEN 2003 10.691713\n39     LELYSTAD 2003 10.064110\n40   MAASTRICHT 2003 11.001370\n41    ROTTERDAM 2003 10.766301\n42     SCHIPHOL 2003 10.705205\n43      TWENTHE 2003 10.018681\n44       VOLKEL 2003 10.520278\n45      DE BILT 2004 10.371038\n46       DEELEN 2004  9.959890\n47        EELDE 2004  9.824590\n48    EINDHOVEN 2004 10.406284\n49  GILZE RIJEN 2004 10.425956\n50     LELYSTAD 2004 10.148361\n51   MAASTRICHT 2004 10.380328\n52    ROTTERDAM 2004 10.592623\n53     SCHIPHOL 2004 10.710383\n54      TWENTHE 2004  9.884890\n55       VOLKEL 2004 10.212912\n56      DE BILT 2005 10.684658\n57       DEELEN 2005 10.320274\n58        EELDE 2005  9.969863\n59    EINDHOVEN 2005 10.810685\n60  GILZE RIJEN 2005 10.796986\n61     LELYSTAD 2005 10.390411\n62   MAASTRICHT 2005 10.848219\n63    ROTTERDAM 2005 10.903288\n64     SCHIPHOL 2005 10.967945\n65      TWENTHE 2005 10.167397\n66       VOLKEL 2005 10.599452\n67      DE BILT 2006 11.230685\n68       DEELEN 2006 10.820274\n69        EELDE 2006 10.597260\n70    EINDHOVEN 2006 11.282466\n71  GILZE RIJEN 2006 11.203014\n72     LELYSTAD 2006 10.810989\n73   MAASTRICHT 2006 11.177534\n74    ROTTERDAM 2006 11.395616\n75     SCHIPHOL 2006 11.355616\n76      TWENTHE 2006 10.835342\n77       VOLKEL 2006 11.065289\n78      DE BILT 2007 11.235068\n79       DEELEN 2007 10.654144\n80        EELDE 2007 10.634521\n81    EINDHOVEN 2007 11.240548\n82  GILZE RIJEN 2007 11.209589\n83     LELYSTAD 2007 10.909315\n84   MAASTRICHT 2007 11.210411\n85    ROTTERDAM 2007 11.417808\n86     SCHIPHOL 2007 11.447671\n87      TWENTHE 2007 10.720274\n88       VOLKEL 2007 11.044932\n89      DE BILT 2008 10.611202\n90       DEELEN 2008 10.123224\n91        EELDE 2008 10.176230\n92    EINDHOVEN 2008 10.645628\n93  GILZE RIJEN 2008 10.566940\n94     LELYSTAD 2008 10.331694\n95   MAASTRICHT 2008 10.585519\n96    ROTTERDAM 2008 10.723224\n97     SCHIPHOL 2008 10.832514\n98      TWENTHE 2008 10.127473\n99       VOLKEL 2008 10.174317\n100     DE BILT 2009 10.525753\n101      DEELEN 2009 10.158630\n102       EELDE 2009  9.806849\n103   EINDHOVEN 2009 10.646301\n104 GILZE RIJEN 2009 10.546575\n105    LELYSTAD 2009 10.326575\n106  MAASTRICHT 2009 10.616712\n107   ROTTERDAM 2009 10.782740\n108    SCHIPHOL 2009 10.720822\n109     TWENTHE 2009 10.028969\n110      VOLKEL 2009 10.347123\n111     DE BILT 2010  9.158082\n112      DEELEN 2010  8.720330\n113       EELDE 2010  8.172603\n114   EINDHOVEN 2010  9.399176\n115 GILZE RIJEN 2010  9.251233\n116    LELYSTAD 2010  8.785753\n117  MAASTRICHT 2010  9.295616\n118   ROTTERDAM 2010  9.385753\n119    SCHIPHOL 2010  9.229863\n120     TWENTHE 2010  8.535890\n121      VOLKEL 2010  9.075890\n122     DE BILT 2011 10.929315\n123      DEELEN 2011 10.550685\n124       EELDE 2011  9.977534\n125   EINDHOVEN 2011 11.281918\n126 GILZE RIJEN 2011 11.127945\n127    LELYSTAD 2011 10.560274\n128  MAASTRICHT 2011 11.195068\n129   ROTTERDAM 2011 11.209041\n130    SCHIPHOL 2011 11.044658\n131     TWENTHE 2011 10.344658\n132      VOLKEL 2011 10.853699\n133     DE BILT 2012 10.368852\n134      DEELEN 2012  9.854098\n135       EELDE 2012  9.547268\n136   EINDHOVEN 2012 10.484699\n137 GILZE RIJEN 2012 10.394809\n138    LELYSTAD 2012  9.998907\n139  MAASTRICHT 2012 10.351913\n140   ROTTERDAM 2012 10.529508\n141    SCHIPHOL 2012 10.403005\n142     TWENTHE 2012  9.858127\n143      VOLKEL 2012 10.230601\n144     DE BILT 2013  9.841096\n145      DEELEN 2013  9.460822\n146       EELDE 2013  9.256164\n147   EINDHOVEN 2013 10.059341\n148 GILZE RIJEN 2013  9.955342\n149    LELYSTAD 2013  9.492201\n150  MAASTRICHT 2013  9.928767\n151   ROTTERDAM 2013  9.952329\n152    SCHIPHOL 2013  9.967123\n153     TWENTHE 2013  9.415890\n154      VOLKEL 2013  9.876164\n155     DE BILT 2014 11.713973\n156      DEELEN 2014 11.299178\n157       EELDE 2014 11.105753\n158   EINDHOVEN 2014 11.836986\n159 GILZE RIJEN 2014 11.755342\n160    LELYSTAD 2014 11.461370\n161  MAASTRICHT 2014 11.771233\n162   ROTTERDAM 2014 11.956438\n163    SCHIPHOL 2014 11.840548\n164     TWENTHE 2014 11.286575\n165      VOLKEL 2014 11.577534\n166     DE BILT 2015 10.776000\n167      DEELEN 2015 10.448219\n168       EELDE 2015 10.212055\n169   EINDHOVEN 2015 11.171233\n170 GILZE RIJEN 2015 11.049315\n171    LELYSTAD 2015 10.599452\n172  MAASTRICHT 2015 11.162192\n173   ROTTERDAM 2015 11.156438\n174    SCHIPHOL 2015 11.026027\n175     TWENTHE 2015 10.426648\n176      VOLKEL 2015 10.940822\n177     DE BILT 2016 10.698907\n178      DEELEN 2016 10.324590\n179       EELDE 2016 10.005738\n180   EINDHOVEN 2016 10.977596\n181 GILZE RIJEN 2016 10.859016\n182    LELYSTAD 2016 10.398907\n183  MAASTRICHT 2016 10.854645\n184   ROTTERDAM 2016 11.100000\n185    SCHIPHOL 2016 10.976230\n186     TWENTHE 2016 10.137741\n187      VOLKEL 2016 10.741803\n188     DE BILT 2017 10.963288\n189      DEELEN 2017 10.560822\n190       EELDE 2017 10.167671\n191   EINDHOVEN 2017 11.224110\n192 GILZE RIJEN 2017 11.192329\n193    LELYSTAD 2017 10.775890\n194  MAASTRICHT 2017 11.250685\n195   ROTTERDAM 2017 11.300000\n196    SCHIPHOL 2017 11.166575\n197     TWENTHE 2017 10.520718\n198      VOLKEL 2017 11.037808\n199     DE BILT 2018 11.400824\n200      DEELEN 2018 11.301096\n201       EELDE 2018 10.714247\n202   EINDHOVEN 2018 11.805479\n203 GILZE RIJEN 2018 11.756986\n204    LELYSTAD 2018 11.306319\n205  MAASTRICHT 2018 11.854247\n206   ROTTERDAM 2018 11.585753\n207    SCHIPHOL 2018 11.552329\n208     TWENTHE 2018 11.132873\n209      VOLKEL 2018 11.575890\n210     DE BILT 2019 11.192877\n211      DEELEN 2019 10.969041\n212       EELDE 2019 10.659452\n213   EINDHOVEN 2019 11.529041\n214 GILZE RIJEN 2019 11.428493\n215    LELYSTAD 2019 11.046849\n216  MAASTRICHT 2019 11.476164\n217   ROTTERDAM 2019 11.419726\n218    SCHIPHOL 2019 11.369863\n219     TWENTHE 2019 11.016164\n220      VOLKEL 2019 11.334521\n221     DE BILT 2020 11.676776\n222      DEELEN 2020 11.408197\n223       EELDE 2020 10.885792\n224   EINDHOVEN 2020 11.994262\n225 GILZE RIJEN 2020 12.029235\n226    LELYSTAD 2020 11.425956\n227  MAASTRICHT 2020 12.056557\n228   ROTTERDAM 2020 11.996175\n229    SCHIPHOL 2020 11.862022\n230     TWENTHE 2020 11.248907\n231      VOLKEL 2020 11.825956\n232     DE BILT 2021 10.500829\n233      DEELEN 2021 10.169697\n234       EELDE 2021  9.905234\n235   EINDHOVEN 2021 10.699449\n236 GILZE RIJEN 2021 10.723416\n237    LELYSTAD 2021 10.379063\n238  MAASTRICHT 2021 10.694766\n239   ROTTERDAM 2021 10.934160\n240    SCHIPHOL 2021 10.746556\n241     TWENTHE 2021 10.168611\n242      VOLKEL 2021 10.572727\n243     DE BILT 2022 11.496712\n244      DEELEN 2022 11.375068\n245       EELDE 2022 10.811233\n246   EINDHOVEN 2022 12.010685\n247 GILZE RIJEN 2022 11.887945\n248    LELYSTAD 2022 11.399178\n249  MAASTRICHT 2022 12.120548\n250   ROTTERDAM 2022 12.003288\n251    SCHIPHOL 2022 11.910959\n252     TWENTHE 2022 11.299725\n253      VOLKEL 2022 11.875616\n254     DE BILT 2023 11.769863\n255      DEELEN 2023 11.505205\n256       EELDE 2023 10.969041\n257   EINDHOVEN 2023 12.123014\n258 GILZE RIJEN 2023 12.058630\n259    LELYSTAD 2023 11.537260\n260  MAASTRICHT 2023 11.947123\n261   ROTTERDAM 2023 12.173151\n262    SCHIPHOL 2023 12.014247\n263     TWENTHE 2023 11.417534\n264      VOLKEL 2023 11.946575\n265     DE BILT 2024 11.887042\n266      DEELEN 2024 11.542254\n267       EELDE 2024 11.287042\n268   EINDHOVEN 2024 12.065634\n269 GILZE RIJEN 2024 11.911017\n270    LELYSTAD 2024 11.810704\n271  MAASTRICHT 2024 11.827887\n272   ROTTERDAM 2024 12.189577\n273    SCHIPHOL 2024 12.034174\n274     TWENTHE 2024 11.576338\n275      VOLKEL 2024 11.892394\n```\n\n\n:::\n:::\n\n\n\n\n\n## Task 5.2\n\nUse the long-format temperature [data set](https://raw.githubusercontent.com/tobiashartl/Rprogramming_UM/main/data/climate.csv).\n\n1. Add the variable `tempF` (temperature in Fahrenheit) to the dataset \n\n2. Compute, grouped by city and year, the mean temperature and standard deviation.\n\n3. Find the coolest and warmest day for each city.\n\n4. Add a variable `lowest_temperature` to the dataset, which remains constant within each `city` group and corresponds to the lowest temperature in that respective group. Do the same for `highest_temperature`\n\n5. Sort the dataset within city groups by temperature.\n\n\n\n\n\n\n\n\n\n\n# Bonus: Data manipulation and tidyverse {#dataman2}\n\n## Consistent Work with Data: tidyverse\n\nNext, we will (superficially) cover the package [dplyr](https://dplyr.tidyverse.org/). This package is part of the [tidyverse](https://www.tidyverse.org/), a collection of R packages designed to provide a consistent approach to working with data. The following packages belong to the [tidyverse](https://www.tidyverse.org/):\n\n - [dplyr](https://dplyr.tidyverse.org/): \"Grammar of Data Manipulation\"\n\n - [ggplot2](https://ggplot2.tidyverse.org/): \"Grammar of Graphics\"\n\n - [readr](https://readr.tidyverse.org/): \"Fast and friendly way to read rectangular data\"\n\n - [tibble](https://tibble.tidyverse.org/): \"A tibble, or tbl_df, is a modern reimagining of the data.frame\"\n\n - [tidyr](https://tidyr.tidyverse.org/): \"Create tidy data. Tidy data is data where:\n      1. Every column is a variable.\n      2. Every row is an observation.\n      3. Every cell is a single value.\"\n\n - [purrr](https://purrr.tidyverse.org/): \"Enhance R’s functional programming toolkit\"\n\nNote: The philosophy (and syntax) of [tidyverse](https://www.tidyverse.org/) differs completely from base-R and is somewhat similar to Python's `pandas`. Some argue tidyverse code is more readable and intuitive, others find it rather unhandy. R code written by AI models typically utilizes packages from the tidyverse.\n\n\n## Pipes\nAn important component of working with data and `dplyr` is the pipe operator `%>%`, included in the `magrittr` package. The goal of this operator (also found in many other languages) is to make function composition more readable in code.\n\nExample:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nf <- function(x) x + 10\ng <- function(x) x * 2\n\na <- 2\nf(g(a))         # 2*a + 10 -> 14\n\n## Same result using the pipe operator\na %>% g() %>% f()\n\n## Parentheses for function calls can be omitted,\n## but for readability, it is helpful to keep them\na %>% g %>% f\n```\n:::\n\n\n\n## Pipes 2\nMore examples\n<div style=\"display: flex; gap: 2em;\">\n\n<div style=\"flex: 1;\">\n\n**dplyr** with `%>%`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_cli %>%\n  dplyr::select(TEMP) %>%\n  summary()\n\n\ndata_cli %>%\n  filter(as.Date(YEARMODA) >= as.Date(\"2024-01-01\") & as.Date(YEARMODA) <= as.Date(\"2024-12-31\")) %>%\n  group_by(as.factor(NAME)) %>%\n  summarise(mtemp = mean(TEMP))\n```\n:::\n\n\n\n</div> <div style=\"flex: 1;\">\n\n**Standard R**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(\n  subset(data_cli, select = TEMP)\n  )\n\ndatatemp <- subset(data_cli, as.Date(YEARMODA) >= as.Date(\"2024-01-01\") & \n                   as.Date(YEARMODA) <= as.Date(\"2024-12-31\"))\ntapply(X = datatemp$TEMP,\n      INDEX = datatemp$NAME,\n      FUN = mean)\n```\n:::\n\n\n\n </div> </div>\n\n\nIn the second example, you can already see that the pipe operator often eliminates the need for unnecessary assignments.\n\n\n## `dplyr`\n\nThe key functions of `dplyr` are:\n\n- [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html): Add new variables to a dataset\n\n- [`select()`](https://dplyr.tidyverse.org/reference/select.html): Select variables (columns)\n\n- [`filter()`](https://dplyr.tidyverse.org/reference/filter.html): Select observations (rows)\n\n- [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html): Sort observations\n\n- [`summarise()`](https://dplyr.tidyverse.org/reference/summarise.html): Reduce variable values of multiple observations to a single value\n\n- [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html): Apply subsequent operations to groups\n\n- `join()`: Merge two datasets\n\n- `bind_rows()`: Add rows to data set (equivalent to `rbind`)\n\nThese functions often have variants and additional helper functions that assist with variable selection.\n\n\n\n## Data manipulation with `dplyr`: Select \nAs before, we want to select certain variables from our data set - now using dplyr. For our climate data set, we want to preserve information about `date`, `location`, and `temperature`, and drop all other information. \n\n`select()` picks the variables of interest while dropping all others. In the example below, we choose to preserve `YEARMODA`, `NAME`, `TEMP`, while dropping all other information (as before). \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data_cli %>% select(YEARMODA, NAME, TEMP)\nhead(data, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    YEARMODA     NAME TEMP\n1 2000-01-01 SCHIPHOL  6.4\n2 2000-01-02 SCHIPHOL  7.2\n3 2000-01-03 SCHIPHOL  8.7\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(data, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         YEARMODA       NAME TEMP\n100152 2024-12-29 MAASTRICHT  0.2\n100153 2024-12-30 MAASTRICHT  1.7\n100154 2024-12-31 MAASTRICHT  1.4\n```\n\n\n:::\n:::\n\n\n\n\n\n## Data manipulation with `dplyr`: Subsetting rows\nNext, we want to subset the rows. Here, the `filter()` command is useful. It drops all information that violates the logical argument. In the example below, we restrict the data to year 2024 and to Maastricht only. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# select data from 2024-01-01 on only\ndata <- data_cli %>% filter(YEARMODA >= as.Date(\"2024-01-01\") &\n                            YEARMODA <= as.Date(\"2024-12-31\")) %>%\n                     filter(NAME == \"MAASTRICHT\") # select Maastricht obs\n\nhead(data[, c(\"YEARMODA\", \"NAME\", \"TEMP\")], 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    YEARMODA       NAME TEMP\n1 2024-01-01 MAASTRICHT  7.0\n2 2024-01-02 MAASTRICHT  9.7\n3 2024-01-03 MAASTRICHT  9.7\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(data[, c(\"YEARMODA\", \"NAME\", \"TEMP\")], 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      YEARMODA       NAME TEMP\n353 2024-12-29 MAASTRICHT  0.2\n354 2024-12-30 MAASTRICHT  1.7\n355 2024-12-31 MAASTRICHT  1.4\n```\n\n\n:::\n:::\n\n\n\n\n## Data manipulation with `dplyr`: Sorting data \nThe function `arrange()` sorts the observations along the values of the selected columns. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_cli_ord <- data_cli %>% arrange(YEARMODA, NAME) %>%\n                select(YEARMODA, NAME, TEMP)\nhead(data_cli_ord, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    YEARMODA    NAME TEMP\n1 2000-01-01 DE BILT  6.0\n2 2000-01-01  DEELEN  4.6\n3 2000-01-01   EELDE  4.4\n```\n\n\n:::\n:::\n\n\n\n\n\n## Task 5.3\n\nReplicate task 5.1 using `dplyr`\n\n\n\n\n\n\n\n\n\n## Data manipulation with `dplyr`: Adding information 1\nTo add a new variable to the data set, we can use the function `mutate()`. As before, add a new variable `season` to the data set: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_cli <- data_cli %>% \n  mutate(\n    season = case_when(\n      format(as.Date(YEARMODA), \"%m\") %in% c(\"03\", \"04\", \"05\") ~ \"spring\",\n      format(as.Date(YEARMODA), \"%m\") %in% c(\"06\", \"07\", \"08\") ~ \"summer\",\n      format(as.Date(YEARMODA), \"%m\") %in% c(\"09\", \"10\", \"11\") ~ \"autumn\",\n      TRUE ~ \"winter\"\n    )\n  )\n\n# Preview\ndata_cli %>% select(YEARMODA, season) |> head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    YEARMODA season\n1 2000-01-01 winter\n2 2000-01-02 winter\n3 2000-01-03 winter\n```\n\n\n:::\n:::\n\n\n\n\n\n## Data manipulation with `dplyr`: Adding information 2\nBesides adding columns, we can also expand our data set by adding further rows to the data. For instance, we could first drop all observations for Maastricht from the climate data set and add them back to it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Split the data set\ndata <- data_cli %>% filter(NAME != \"MAASTRICHT\")\ndata_M <- data_cli %>% filter(NAME == \"MAASTRICHT\")\n\n# Join the two data sets\ndata_new <- bind_rows(data, data_M)\n\n# Check if identical (ignores row order)\nidentical(data_cli, data_new)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Preserve original order using column X\ndata_new_ordered <- data_new %>% arrange(X)\n\n# Check if fully identical after reordering\nidentical(data_cli, data_new_ordered)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Data manipulation with `dplyr`: Reshaping data\nDatasets that are *tidy* should have each observation as a row and each variable as a column (`long` format). However, datasets are often found in `wide` format.\n\nA way to convert `wide` to `long` is the `pivot_longer()` function from `tidyr`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_cli_new <- data_cli %>%  # subset the data set\n      mutate(date = as.Date(YEARMODA), location = as.factor(NAME), \n             temp = as.numeric(TEMP)) %>% \n      select(date, location, temp) \ndata_cli_new_wide <- data_cli_new %>% tidyr::pivot_wider(names_from = location, values_from = temp)\n\nhead(data_cli_new_wide[, c(1, 2, 3, 4)])\n\ndata_cli_new_long <- data_cli_new_wide %>%\n  tidyr::pivot_longer(\n    cols = -date,                  # all columns except 'date'\n    names_to = \"location\",         # name of the new key column\n    values_to = \"temp\"             # name of the value column\n  )\n```\n:::\n\n\n\n\n\n\n\n\n## Data manipulation with `dplyr`: Computing summary statistics 1\nTo compute summary statistics along groups, we can use `group_by()`, which splits the data into groups and allows for the group-wise execution of functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add variable year\ndata_cli_new <- data_cli_new %>% mutate(year = format(as.Date(date), \"%Y\")) \n\n# mean temperature by location \ndata_cli_new %>% \n    group_by(location) %>% # now data is grouped by city\n    summarise(mean_temp = mean(temp, na.rm = TRUE), .groups = \"drop\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 2\n   location    mean_temp\n   <fct>           <dbl>\n 1 DE BILT          10.9\n 2 DEELEN           10.5\n 3 EELDE            10.2\n 4 EINDHOVEN        11.1\n 5 GILZE RIJEN      11.0\n 6 LELYSTAD         10.6\n 7 MAASTRICHT       11.1\n 8 ROTTERDAM        11.1\n 9 SCHIPHOL         11.1\n10 TWENTHE          10.4\n11 VOLKEL           10.8\n```\n\n\n:::\n:::\n\n\n\n## Data manipulation with `dplyr`: Computing summary statistics 2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mean temperature by year\ndata_cli_new %>% \n    group_by(year) %>% # now data is grouped by year\n    summarise(mean_temp = mean(temp, na.rm = TRUE), .groups = \"drop\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 25 × 2\n   year  mean_temp\n   <chr>     <dbl>\n 1 2000       10.8\n 2 2001       10.3\n 3 2002       10.7\n 4 2003       10.5\n 5 2004       10.3\n 6 2005       10.6\n 7 2006       11.1\n 8 2007       11.1\n 9 2008       10.4\n10 2009       10.4\n# ℹ 15 more rows\n```\n\n\n:::\n:::\n\n\n\n## Data manipulation with `dplyr`: Computing summary statistics 3\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mean temperature by year and city\ndata_cli_new %>% \n    group_by(year, location) %>% # now data is grouped by city and year\n    summarise(mean_temp = mean(temp, na.rm = TRUE), .groups = \"drop\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 275 × 3\n   year  location    mean_temp\n   <chr> <fct>           <dbl>\n 1 2000  DE BILT          10.9\n 2 2000  DEELEN           10.5\n 3 2000  EELDE            10.3\n 4 2000  EINDHOVEN        11.1\n 5 2000  GILZE RIJEN      10.9\n 6 2000  LELYSTAD         10.6\n 7 2000  MAASTRICHT       11.2\n 8 2000  ROTTERDAM        11.1\n 9 2000  SCHIPHOL         11.0\n10 2000  TWENTHE          10.6\n# ℹ 265 more rows\n```\n\n\n:::\n:::\n\n\n\n## Task 5.4\n\nReplicate task 5.2 using `dyplr`\n\n\n\n\n\n\n\n\n\n\n\n# Regression analysis {#reg1}\n\n## General Information\n\n\nIn what follows, consider the **multiple linear regression model**\n\n $$y_i = \\beta_0 + \\beta_1 x_{1,i} + \\beta_2 x_{2,i} + \\dots + \\beta_p x_{p,i} + u_i,\\ i=1,\\dots,n$$\nOr, in matrix notation:\n$$\\mathbf{y} = \\mathbf{X}\\beta + \\mathbf{u},$$\nwhere $\\mathbf{y}, \\mathbf{u}\\in\\mathbb{R}^{n}$, $\\mathbf{X}\\in\\mathbb{R}^{n\\times k}$, $\\beta\\in\\mathbb{R}^{k}$, and $k = p + 1$.\n\n\n## Formula Objects\n\nR is designed to easily estimate various statistical models. It provides a specific object class to symbolically describe statistical models, called `formula` objects. See `?formula` for more details.\n\nExample: the regression model\n\n$y_i = \\beta_0 + \\beta_1 x_{1,i} + \\beta_2 x_{2,i} + u_i$\n\ncan be specified in R as a `formula` like this:\n\n`y ~ x1 + x2`\n\n---\n\n- Important operators:\n  - `~`: Basis for all models. `y ~ model` specifies that the dependent variable `y` is modeled using the linear predictors described in `model`.\n  - `+`: Models consist of terms separated by `+` (in simple cases, these are variables).\n  - `:`: Creates interaction terms between variables.\n  - `*`: `a*b` is equivalent to `a + b + a:b`.\n  - `^`: `(a + b)^2` is equivalent to `(a + b) * (a + b)`.\n\n- Note: `y ~ x1 + x2^2` is NOT the model $y_i = \\beta_0 + \\beta_1 x_{1,i} + \\beta_2 x^2_{2,i} + u_i$!\n\n- For arithmetic expressions (e.g., variable transformations), use the function `I()`: <br>`y ~ x1 + I(x2^2)`.\n\n- Factor variables in formulas are automatically *dummy coded*.\n\n---\n\nThe standard function for estimating linear models is `lm()`. This function returns an `lm` object with numerous available methods: `summary()`, `plot()`, `predict()`, etc.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# example : Which city has the highest average temperature?\nregression_1 <- lm(TEMP ~ NAME, data = data_cli)\nsummary(regression_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = TEMP ~ NAME, data = data_cli)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-27.5000  -4.5761   0.0697   4.9588  20.3644 \n\nCoefficients:\n                Estimate Std. Error t value Pr(>|t|)    \n(Intercept)     10.85676    0.06627 163.833  < 2e-16 ***\nNAMEDEELEN      -0.33641    0.09373  -3.589 0.000332 ***\nNAMEEELDE       -0.68061    0.09367  -7.266 3.74e-13 ***\nNAMEEINDHOVEN    0.22449    0.09368   2.396 0.016560 *  \nNAMEGILZE RIJEN  0.14745    0.09371   1.574 0.115598    \nNAMELELYSTAD    -0.25673    0.09374  -2.739 0.006166 ** \nNAMEMAASTRICHT   0.20279    0.09367   2.165 0.030399 *  \nNAMEROTTERDAM    0.27359    0.09367   2.921 0.003494 ** \nNAMESCHIPHOL     0.20292    0.09367   2.166 0.030285 *  \nNAMETWENTHE     -0.42119    0.09379  -4.491 7.11e-06 ***\nNAMEVOLKEL      -0.01553    0.09374  -0.166 0.868429    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.322 on 100143 degrees of freedom\nMultiple R-squared:  0.002293,\tAdjusted R-squared:  0.002193 \nF-statistic: 23.01 on 10 and 100143 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Accessing Regression Results\n\n- Use functions such as `coefficients()`, `fitted()`, `residuals()`.\n- Or directly access the `lm` or `summary.lm` list objects:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# elements in lm object\nregression_1$coefficients\nregression_1$residuals\nregression_1$fitted\n\n# summary.lm provides additional information:\nsum.reg.1 <- summary(regression_1)\nsum.reg.1$coefficients      ## matrix with estimates, std-dev, t-stat, p-value\nsum.reg.1$sigma             ## residual standard error estimate\nsum.reg.1$adj.r.squared     ## adjusted R^2 of regression\n```\n:::\n\n\n\n\n\n## Task 5.5\nReconsider the climate [data set](https://raw.githubusercontent.com/tobiashartl/Rprogramming_UM/main/data/climate.csv). You want to draw inference on whether temperature is trending, at the same time stay agnostic about the nature of the trend. Therefore, you decide to approximate the trending dynamics of temperature by a polynomial trend of order p\n$$\n  temp_t = \\beta_0 + \\beta_1 t + \\beta_2 t^2 + \\beta_3 t^3 + ... + \\beta_p t^p + u_t.\n$$\nFor one of the different locations\n\n\n1. Test different specifications for the trend (i.e.\\ choose $p$ and possibly set some of the coefficients above to zero). Allow for \n   \n    - Only a constant and a linear trend\n    - Quadratic, cubic, and higher order trends\n    - A polynomial trend up to order 8, but include only coefficients that are significant on a 5% level. \n  \n2. Select one of your models and apply the `summary()` method to it. Discuss the estimates, standard errors, p-values, residual sum of squares, and the adjusted $R^2$ value.\n\n3. Plot the temperature series for your location of choice. What could make it hard to identify a trend?\n\n4. Generate monthly dummies. Add them to your regression model. Do your conclusions change?\n\n\n\n\n\n\n",
    "supporting": [
      "IntroductionR_Session5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}