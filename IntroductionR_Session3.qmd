---
title: "Introduction to R"
subtitle: "Session 3"
author: ""
filters:
  - diagram
diagram:
  engine:
    tikz:
      header-includes:
        - '\usepackage{adjustbox,xcolor}'
        - '\usetikzlibrary{arrows, shapes}'
        - '\definecolor{UMdblue}{RGB}{0,28,61}'
        - '\definecolor{UMlblue}{RGB}{0,162,219}'
        - '\definecolor{UMorangered}{RGB}{232,78,16}'
        - '\definecolor{UMorange}{RGB}{243,148,37}'
        - '\definecolor{UMred}{RGB}{174,11,18}'
---

# Session Overview

1.  [Functions in R](#functions)
2.	[Bonus: Looking Inside Functions](#functions2)
3.  [Objects Revisited](#objects)
4.	[Packages](#packages)

# Functions {#functions}

## Functions
We have already encountered many *functions* in R:

*Add examples based on previous sessions*

## Function Overview
<!-- To use TikZ, we need to install the following extension: -->
<!-- quarto install extension pandoc-ext/diagram -->

A function consists of three parts:
```{tikz, echo=FALSE}
\definecolor{UMdblue}{RGB}{0,28,61}
\definecolor{UMlblue}{RGB}{0,162,219}
\definecolor{UMorangered}{RGB}{232,78,16}
\definecolor{UMorange}{RGB}{243,148,37}
\definecolor{UMred}{RGB}{174,11,18}

\begin{tikzpicture}[every node/.style={rounded corners, minimum size=2cm}]
\node[fill=UMlblue!10, align=center] (in) at (0,0) {
	\includegraphics[width=.2\textwidth]{figures/Input.png}\\
	\textsf{Input}\\
	\textsf{\emph{function argument(s)}}
};
\node[fill=UMred!10, align=center] (f) at (6,0) {
	\includegraphics[width=.194\textwidth]{figures/Function.png}\\
	\textsf{Function}\\%
	\textsf{\emph{performs operations on input}}
};
\node[fill=UMdblue!10, align=center] (out) at (12,0) {
	\includegraphics[width=.17\textwidth]{figures/Output.png}\\
	\textsf{Output}\\%
	\textsf{\emph{the result of the operations}}
};
\draw [->, line width=0.1cm, color = UMlblue] (in) to (f);
\draw [->, line width=0.1cm, color = UMred] (f) to (out);
\end{tikzpicture}
```

## Arguments

- A function is called by specifying the function name followed by one or more comma-separated arguments in parentheses: 
```{r, eval=FALSE}
function_name(argument1 = value1, argument2 = value2, ...)
```

-	This gives the same:
```{r, eval=FALSE}
function_name(argument2 = value2, argument1 = value1, ...)
```

-	This also gives the same:
```{r, eval=FALSE}
function_name(value1, value2, ...)
```

-	This does not!
```{r, eval=FALSE}
function_name(value2, value1, ...)
```

- Why?

## More about Arguments

- If you don't give argument names, R assumes arguments are given in the order as defined.

- There are also default arguments, which do not always need to be specified.

- Let us look at an example: calculating the logarithm using the `log` function:
```{.r code-line-numbers="|2|3"}
fake_data <- c(1, 1, 2, 3, 5, 8, 13, 21)
log_exp_data <- log(fake_data)					# <1>
log_2_data <- log(fake_data, base = 2)	# <2>
```

1. Calculates the natural logarithm;

2. Calculates the logarithm with base 2.

## Understanding the log function

Execute the command `?log`. It gives something like this:

![](figures/help_log_all.png)

## Understanding the log function

Execute the command `?log`. It gives something like this:

![](figures/help_log.png)

## Understanding the log function

Execute the command `?log`. It gives something like this:

![](figures/help_log1.png)

## Understanding the log function

Execute the command `?log`. It gives something like this:

![](figures/help_log2.png)

## Understanding the log function

Execute the command `?log`. It gives something like this:

![](figures/help_log3.png)

## Understanding the log function

Execute the command `?log`. It gives something like this:

![](figures/help_log4.png)

## Understanding the log function

Execute the command `?log`. It gives something like this:

![](figures/help_log5.png)

## Understanding the log function

Execute the command `?log`. It gives something like this:

![](figures/help_log6.png)

## input and output of the log function

- Note how the `log` function preserves the object type of the input:
```{r}
fake_data <- c(1, 1, 2, 3, 5, 8, 13, 21)
log(fake_data)

fake_data_matrix <- matrix(fake_data, nrow = 4)
log(fake_data_matrix)
```


## Next up

- an exercise to practice with different kind of arguments
- the ... argument

## Exercise: Function Arguments

The function `rnorm()` can be used to simulate normally distributed data. The function `mean()` can be used to calculate the sample mean of the data, while the function `sd()` can be used to calculate the sample standard deviation. You will need to use the help files of these functions to complete the question.

1. Simulate 100 numbers from a normal distribution with mean 0 and standard deviation 1 and store these in a vector called `x1`. Do this with the least amount of explicitly specified arguments as possible.

2. Simulate 200 numbers from a normal distribution with mean 0 and standard deviation 5 and store these in a vector called `x2`. Do this with the least amount of explicitly specified arguments as possible.

3. Simulate 80 numbers from a normal distribution with mean -6 and standard deviation 4 and store these in a vector called `x3`. Do this with the least amount of explicitly specified arguments as possible.

4. Calculate the mean and standard deviation of each of the three series.

5. Set the 10th value of `x1` to `NA`. Calculate the mean and standard deviation again. What do you observe? Learn from the help function how we can fix this.

## The ... argument

- If you opened the help function of `mean()` before, you saw the last argument is
```{r, echo=FALSE, results='asis'}
cat("\"`...` &nbsp;&nbsp;&nbsp;&nbsp; further arguments passed to or from other methods\"")
```

- `...` is a special argument: it allows you to put in different arguments that are then passed on to an *other* function internally.

- To know how to put them correctly, you may need to look at the *other function*; not always easy!

- Since the function accepts any arguments in `...`, an error message will typically be given at a 'deeper level', which can be very confusing. Or you even may not get an error message at all.

## Exercise: function arguments revisited

1. Repeat the last part of the previous exercise, calculating the standard deviation for `x1`. Make sure to name the second argument of the function explicitly. Now intentionally misspell the name of the second argument and look at the error message.

2. Now, do the same for calculating the mean; first do it correctly, then make an intentional mistake in the name of the argument.

3. Can you explain the difference in results?

## Exercise: plot president approval ratings

The dataset `presidents` contains US president approval ratings on a quarterly basis from 1945 to 1974. To visualise these approval ratings, we can use the `plot()` function. First, make a basic plot, then customise the plot in the following ways

1. The title of the X-axis should say 'Year', the title of the Y-axis 'Approval Rating'.

2. Make the line blue. (Hint: specifying the colour literally as `"blue"` works, also note the cool effects in RStudio!)

3. Make the tick marks appear on the inside of the figure rather than the outside. Even better, change the tick marks into grid lines. (This one is tricky!)

You will need to consult the help file for this exercise; see this therefrom more as an exercise in how to navigate R's help system, than an exercise in plotting (which we will cover in more detail later).

You may want to ask ChatGPT for help and then try to see if you could also have gotten the same answer yourself; it may not always give you the most straightforward answer though!

<!-- plot(presidents, xlab = "Year", ylab = "approval rating", col="blue", tck=0.05) -->

## useful functions: descriptive statistics

# Bonus: Looking Inside Functions {#functions2}

## Looking Inside Functions

Creating a simple function manually, to understand how functions work.

# Objects revisited {#objects}

## Objects and Their Labels

Discussion how objects and classes are used for function output. How then functions appear to act differently on different types of objects (e.g. `plot()`).

- Objects can be seen as a *package*: there is the actual *content*, and there is a *label* explaining the purpose of the object.

![](figures/package.png){width=40%}

- We can obtain the label from the function `class()`
- Many functions act differently, depending on the class of the input.

## The summary function

- We can illustrate this using the `summary()` function.

- Summary on vectors:
```{r echo=TRUE}
x <- rnorm(100)
summary(x)
```

## The summary function

- Summary on data frames:
```{r echo=TRUE}
courses <- read.csv("data/Courses.csv")
summary(courses)
```

## The summary function

- Similar ideas for functions such as `plot()`, `print()`, etc.

- The output of summary is an object in itself:
```{r echo=TRUE}
summ_x <- summary(x)
class(summ_x)
```
In terms of content, this is just a (named) vector.

## Behind the Scenes: the function.class structure

- Behind the scenes, R works as follows: 
```{tikz, echo=FALSE}
\definecolor{UMdblue}{RGB}{0,28,61}
\definecolor{UMlblue}{RGB}{0,162,219}
\definecolor{UMorangered}{RGB}{232,78,16}
\definecolor{UMorange}{RGB}{243,148,37}
\definecolor{UMred}{RGB}{174,11,18}

\begin{tikzpicture}[every node/.style={rounded corners, minimum size=2cm}]
\node[fill=UMlblue!10, align=center] (in) at (0,3) {
	\includegraphics[width=.2\textwidth]{figures/package.png}\\
	\textsf{Input}
	\textsf{\emph{with class A or B}}
};
\node[fill=UMorangered!10, align=center] (g) at (5,3) {
	``\texttt{cook()}''\\
	\includegraphics[width=.194\textwidth]{figures/Package_label.png}\\
	\textsf{Generic function}\\%
	\textsf{\emph{checks class}}
};
\node[fill=UMred!10, align=center] (f) at (10,6) {
	``\texttt{cook.A()}''\\
	\includegraphics[width=.194\textwidth]{figures/Function.png}\\
	\textsf{Class-specific function}\\%
	\textsf{\emph{for input class A}}
};
\node[fill=UMred!10, align=center] (f2) at (10,0) {
	``\texttt{cook.B()}''\\
	\includegraphics[width=.194\textwidth]{figures/Function2.png}\\
	\textsf{Class-specific function}\\%
	\textsf{\emph{for input class B}}
};
\node[fill=UMdblue!10, align=center] (out) at (15,6) {
	\includegraphics[width=.17\textwidth]{figures/Output.png}\\
	\textsf{Output}\\%
	\textsf{\emph{result for class A}}
};
\node[fill=UMdblue!10, align=center] (out2) at (15,0) {
	\includegraphics[width=.17\textwidth]{figures/Output2.png}\\
	\textsf{Output}\\%
	\textsf{\emph{result for class B}}
};
\draw [->, line width=0.1cm, color = UMlblue] (in) to (g);
\draw [->, line width=0.1cm, color = UMorangered] (g) to (f);
\draw [->, line width=0.1cm, color = UMorangered] (g) to (f2);
\draw [->, line width=0.1cm, color = UMred] (f) to (out);
\draw [->, line width=0.1cm, color = UMred] (f2) to (out2);
\end{tikzpicture}
```

## Behind the Scenes: the function.class structure

- if you start typing the `summary()` function name in RStudio, you will see that there are actually many summary functions ...

- ... Among which `summary.data.frame()` and `summary.matrix()`

- in principle we need not bother with the system, but it can be useful to keep in mind for two cases:

1. Help files and documentation may differ depending on classes

2. Applying it to an object for which the class function has not been defined (*"Why does `summary()` not work on my object X?"*)

# Packages {#packages}

Explaining the philosophy of the package management system. Discussion of how to find good packages.

## Installing Packages

- One of R's defining features is the richness of its package management system.

- Installing packages is straightforward. But how do I know which package I need?

- And how do packages function? Do they rely on other packages? Should I be bothered with this?

- Let's have a deeper look.

## Finding good packages

- Sometimes packages come recommended in books or articles.

- If not, do a Google or ChatGPT search: 'R package for reading Excel'; top search results are typically the most popular packages.

- Unsure about the quality? Some advice:

  + Consider the authors. Are they respected academics? Or have a good track record of developing packages? These are good signs.

  + Read the manuals / help files. Do they make sense? Are they written by someone who understands the important aspects of the methods?

  + Install and try them, and see if they match your expectations.
 
## More about packages

- Most of the time you need not need to be bothered by understanding the deeper meanings of the package, and you can just install it directly. But in case you do want to have a look, here are some things you can pay attention to.

- 'Official' packages are hosted on the **Comprehensive R Archive Network (CRAN)**.

- The package homepage can be found as **https://cran.r-project.org/package=package-name**

- You can find the same info after installing a package by clicking on the package name, then on *'DESCRIPTION file'*.

- Important fields:
  + Maintainer & Author
  + URL
  + Imports & LinkingTo: the packages needed to make the package work (installation is normally taken care of automatically)
  + Suggests: packages that are not necessarily needed for using the package, but are needed for specific functionalities

## Suggested packages

- It is up to the author to decide what packages to suggest, and what packages to list as imports.

- It is also up to the author to protect the user from strange error messages while not having installed a suggested package.

- This is not always done properly!

- Suggested packages are not always installed automatically!

## Installing suggested packages

- The command
```{r eval=FALSE}
install.packages("package-name")
```
does not install suggested packages. Use instead
```{r eval=FALSE}
install.packages("package-name", dependencies = TRUE)
```

- In RStudio, make sure that the box "Install dependencies" is checked.

## Exercise: package information

- Find out who the maintainer is of the package `bigtime`.