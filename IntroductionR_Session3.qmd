---
title: "Introduction to R"
subtitle: "Session 3"
author: "fill presenter names here"
format:
  revealjs:
    theme: "theme.scss"
    transition: fade
    background-transition: fade
    highlight-style: ayu-mirage
    fontsize: 1.5em
code-link: true
execute:
  echo: true
  freeze: auto
filters:
  - diagram
diagram:
  header-includes: |
    \usetikzlibrary{arrows,shapes.geometric,patterns,decorations.pathreplacing,quotes}
    \definecolor{UMdblue}{RGB}{0,28,61}
    \definecolor{UMlblue}{RGB}{0,162,219}
    \definecolor{UMorangered}{RGB}{232,78,16}
    \definecolor{UMorange}{RGB}{243,148,37}
    \definecolor{UMred}{RGB}{174,11,18}

---

# Course Overview

1.  [Functions in R](#functions)
2.	[Bonus: Looking Inside Functions](#functions2)
3.  [Objects Revisited](#objects)
4.	[Packages](#packages)

# Functions

## Functions
We have already encountered many *functions* in R:

*Add examples based on previous sessions*

## Function Overview

A function consists of three parts:

```{tikz}
\begin{tikzpicture}[every node/.style={draw, minimum size=2cm}]
\node[align=center] (x2) at (0,0) {\huge$x_{t-2}$};
\node[align=center] (z1) at (5,0) {\huge$z_{t-1}$};
\node[align=center] (y0) at (10,0) {\huge$y_{t}$};
\draw [->, line width=0.2cm] (x2) to (z1);
\draw [->, line width=0.2cm] (z1) to (y0);
\end{tikzpicture}
```

## Arguments

-   A function is called by specifying the function name followed by one or more comma-separated arguments in parentheses: `function_name(argument1 = value1, argument2 = value2,...)`

-   Argument names do not always need to be specified: `function_name(value1, value2,...)`

-   Attention: Order matters!

-   There are also default arguments, which do not always need to be specified. More on this later.

## Extending R with Packages

There are many packages available on [CRAN](https://cran.r-project.org/) for various applications. These allow for expanding the relatively small core system of R. While R comes with some standard packages, many need to be installed separately.

```{r list11, eval = FALSE}
install.packages("AER")  # Install a previously unavailable package
library(AER)             # Load the package (makes objects 
                         # in the package visible in the
                         # global namespace)
data(CASchools)          # Example dataset "CASchools"
?ivreg                   # Help for function ivreg
```

-   `search()` shows the search path, i.e., which packages are already loaded:

```{r list12, eval = TRUE}
search()
```


## Lists

Vectors, matrices, and arrays require all elements to be of the same data type. Lists, however, are more general as they allow arbitrary combinations of data types. A list is created using the `list()` function.

```{r list36, eval = FALSE}
L1 <- list(
  a = 1:3,
  A = matrix(1:9,3,3),
  w = "Hello!"        # Elements can have names AND be of any type!
)
```

Lists can also contain other lists:

```{r list37, eval = FALSE}
L2 <- list(
  a = 1:3,
  l1 = L1 # List within a list
)
```

## Lists

Lists are indexed using double square brackets (numeric, logical, by name):

```{r list38, eval = FALSE}
L1[[1]]    # 1,2,3     -> Vector
L1[1]      # list(1:3) -> Still a list (sublist of L1)
L1[["w"]]  # "Hello!"
```

Named lists can also be accessed using the `$` operator:

```{r list39, eval = FALSE}
L1$w       # "Hello!"
```

## Recursion

Sometimes quite useful: recursive functions.

```{r factorial , eval = FALSE}
factorial <- function(n){
  if (n<0) stop("Factorial only for positive integers")

  if (n<2) return(1)

  n * factorial(n-1)
}
```









