---
title: "Introduction to R"
subtitle: "Session 3"
author: "fill presenter names here"
format:
  revealjs:
    theme: "theme.scss"
    transition: fade
    background-transition: fade
    highlight-style: ayu-mirage
    fontsize: 1.5em
    code-line-numbers: false
code-link: true
execute:
  echo: true
  freeze: auto
filters:
  - diagram
diagram:
  engine:
    tikz:
      header-includes:
        - '\usepackage{adjustbox,xcolor}'
        - '\usetikzlibrary{arrows, shapes}'
        - '\definecolor{UMdblue}{RGB}{0,28,61}'
        - '\definecolor{UMlblue}{RGB}{0,162,219}'
        - '\definecolor{UMorangered}{RGB}{232,78,16}'
        - '\definecolor{UMorange}{RGB}{243,148,37}'
        - '\definecolor{UMred}{RGB}{174,11,18}'
---

<!-- To use TikZ, we need to install the following extension: -->
<!-- quarto install extension pandoc-ext/diagram -->

# Course Overview

1.  [Functions in R](#functions)
2.	[Bonus: Looking Inside Functions](#functions2)
3.  [Objects Revisited](#objects)
4.	[Packages](#packages)

# Functions

## Functions
We have already encountered many *functions* in R:

*Add examples based on previous sessions*

## Function Overview

A function consists of three parts:
```{tikz, echo=FALSE}
\definecolor{UMdblue}{RGB}{0,28,61}
\definecolor{UMlblue}{RGB}{0,162,219}
\definecolor{UMorangered}{RGB}{232,78,16}
\definecolor{UMorange}{RGB}{243,148,37}
\definecolor{UMred}{RGB}{174,11,18}

\begin{tikzpicture}[every node/.style={rounded corners, minimum size=2cm}]
\node[fill=UMlblue!10, align=center] (in) at (0,0) {
	\includegraphics[width=.2\textwidth]{figures/Input.png}\\
	\textsf{Input}\\
	\textsf{\emph{function argument(s)}}
};
\node[fill=UMred!10, align=center] (f) at (6,0) {
	\includegraphics[width=.194\textwidth]{figures/Function.png}\\
	\textsf{Function}\\%
	\textsf{\emph{performs operations on input}}
};
\node[fill=UMdblue!10, align=center] (out) at (12,0) {
	\includegraphics[width=.17\textwidth]{figures/Output.png}\\
	\textsf{Output}\\%
	\textsf{\emph{the result of the operations}}
};
\draw [->, line width=0.1cm] (in) to (f);
\draw [->, line width=0.1cm] (f) to (out);
\end{tikzpicture}
```

## Arguments

-   A function is called by specifying the function name followed by one or more comma-separated arguments in parentheses: 
```{r, eval=FALSE}
function_name(argument1 = value1, argument2 = value2, ...)
```

-		This gives the same:
```{r, eval=FALSE}
function_name(argument2 = value2, argument1 = value1, ...)
```

-		This also gives the same:
```{r, eval=FALSE}
function_name(value1, value2, ...)
```

-		This does not!
```{r, eval=FALSE}
function_name(value2, value1, ...)
```

- Why?

## More about Arguments

- If you don't give argument names, R assumes arguments are given in the order as defined.

- There are also default arguments, which do not always need to be specified.

- Let us look at an example.


## Lists

Vectors, matrices, and arrays require all elements to be of the same data type. Lists, however, are more general as they allow arbitrary combinations of data types. A list is created using the `list()` function.

```{r list36, eval = FALSE}
L1 <- list(
  a = 1:3,
  A = matrix(1:9,3,3),
  w = "Hello!"        # Elements can have names AND be of any type!
)
```

Lists can also contain other lists:

```{r list37, eval = FALSE}
L2 <- list(
  a = 1:3,
  l1 = L1 # List within a list
)
```

## Lists

Lists are indexed using double square brackets (numeric, logical, by name):

```{r list38, eval = FALSE}
L1[[1]]    # 1,2,3     -> Vector
L1[1]      # list(1:3) -> Still a list (sublist of L1)
L1[["w"]]  # "Hello!"
```

Named lists can also be accessed using the `$` operator:

```{r list39, eval = FALSE}
L1$w       # "Hello!"
```

# Packages






