---
title: "Introduction to R"
subtitle: "Session 3"
author: ""
filters:
  - diagram
diagram:
  engine:
    tikz:
      header-includes:
        - '\usepackage{adjustbox,xcolor}'
        - '\usetikzlibrary{arrows, shapes}'
        - '\definecolor{UMdblue}{RGB}{0,28,61}'
        - '\definecolor{UMlblue}{RGB}{0,162,219}'
        - '\definecolor{UMorangered}{RGB}{232,78,16}'
        - '\definecolor{UMorange}{RGB}{243,148,37}'
        - '\definecolor{UMred}{RGB}{174,11,18}'
---

# Session Overview

1.  [Functions in R](#functions)
2.	[Bonus: Looking Inside Functions](#functions2)
3.  [Objects Revisited](#objects)
4.	[Packages](#packages)

# Functions {#functions}

## Functions
We have already encountered many *functions* in R:

*Add examples based on previous sessions*

## Function Overview
<!-- To use TikZ, we need to install the following extension: -->
<!-- quarto install extension pandoc-ext/diagram -->

A function consists of three parts:
```{tikz, echo=FALSE}
\definecolor{UMdblue}{RGB}{0,28,61}
\definecolor{UMlblue}{RGB}{0,162,219}
\definecolor{UMorangered}{RGB}{232,78,16}
\definecolor{UMorange}{RGB}{243,148,37}
\definecolor{UMred}{RGB}{174,11,18}

\begin{tikzpicture}[every node/.style={rounded corners, minimum size=2cm}]
\node[fill=UMlblue!10, align=center] (in) at (0,0) {
	\includegraphics[width=.2\textwidth]{figures/Input.png}\\
	\textsf{Input}\\
	\textsf{\emph{function argument(s)}}
};
\node[fill=UMred!10, align=center] (f) at (6,0) {
	\includegraphics[width=.194\textwidth]{figures/Function.png}\\
	\textsf{Function}\\%
	\textsf{\emph{performs operations on input}}
};
\node[fill=UMdblue!10, align=center] (out) at (12,0) {
	\includegraphics[width=.17\textwidth]{figures/Output.png}\\
	\textsf{Output}\\%
	\textsf{\emph{the result of the operations}}
};
\draw [->, line width=0.1cm, color = UMlblue] (in) to (f);
\draw [->, line width=0.1cm, color = UMred] (f) to (out);
\end{tikzpicture}
```

## Arguments

- A function is called by specifying the function name followed by one or more comma-separated arguments in parentheses: 
```{r, eval=FALSE}
function_name(argument1 = value1, argument2 = value2, ...)
```

-	This gives the same:
```{r, eval=FALSE}
function_name(argument2 = value2, argument1 = value1, ...)
```

-	This also gives the same:
```{r, eval=FALSE}
function_name(value1, value2, ...)
```

-	This does not!
```{r, eval=FALSE}
function_name(value2, value1, ...)
```

- Why?

## More about Arguments

- If you don't give argument names, R assumes arguments are given in the order as defined.

- There are also default arguments, which do not always need to be specified.

- Let us look at an example: calculating the logarithm using the `log` function:
```{.r code-line-numbers="|2|3"}
fake_data <- c(1, 1, 2, 3, 5, 8, 13, 21)
log_exp_data <- log(fake_data)					# <1>
log_2_data <- log(fake_data, base = 2)	# <2>
```

1. Calculates the natural logarithm;

2. Calculates the logarithm with base 2.

## Understanding the log function

Execute the command `?log`. It gives something like this:

![](figures/help_log_all.png)

## Understanding the log function

Execute the command `?log`. It gives something like this:

![](figures/help_log.png)

## Understanding the log function

Execute the command `?log`. It gives something like this:

![](figures/help_log1.png)

## Understanding the log function

Execute the command `?log`. It gives something like this:

![](figures/help_log2.png)

## Understanding the log function

Execute the command `?log`. It gives something like this:

![](figures/help_log3.png)

## Understanding the log function

Execute the command `?log`. It gives something like this:

![](figures/help_log4.png)

## Understanding the log function

Execute the command `?log`. It gives something like this:

![](figures/help_log5.png)

## Understanding the log function

Execute the command `?log`. It gives something like this:

![](figures/help_log6.png)

## input and output of the log function

- Note how the `log` function preserves the object type of the input:
```{r}
fake_data <- c(1, 1, 2, 3, 5, 8, 13, 21)
log(fake_data)

fake_data_matrix <- matrix(fake_data, nrow = 4)
log(fake_data_matrix)
```


## Next up

- an exercise to practice with different kind of arguments
- the ... argument

## Exercise: Function Arguments

The function `rnorm()` can be used to simulate normally distributed data. The function `mean()` can be used to calculate the sample mean of the data, while the function `sd()` can be used to calculate the sample standard deviation. You will need to use the help files of these functions to complete the question.

1. Simulate 100 numbers from a normal distribution with mean 0 and standard deviation 1 and store these in a vector called `x1`. Do this with the least amount of explicitly specified arguments as possible.

2. Simulate 200 numbers from a normal distribution with mean 0 and standard deviation 5 and store these in a vector called `x2`. Do this with the least amount of explicitly specified arguments as possible.

3. Simulate 80 numbers from a normal distribution with mean -6 and standard deviation 4 and store these in a vector called `x3`. Do this with the least amount of explicitly specified arguments as possible.

4. Calculate the mean and standard deviation of each of the three series.

5. Set the 10th value of `x1` to `NA`. Calculate the mean and standard deviation again. What do you observe? Learn from the help function how we can fix this.

## The ... argument

- If you opened the help function of `mean()` before, you saw the last argument is
```{r, echo=FALSE, results='asis'}
cat("\"`...` &nbsp;&nbsp;&nbsp;&nbsp; further arguments passed to or from other methods\"")
```

- `...` is a special argument: it allows you to put in different arguments that are then passed on to an *other* function internally.

- To know how to put them correctly, you may need to look at the *other function*; not always easy!

- Since the function accepts any arguments in `...`, an error message will typically be given at a 'deeper level', which can be very confusing. Or you even may not get an error message at all.

## exercise: plot president approval ratings

1. Repeat the last part of the previous exercise, calculating the standard deviation for `x1`. Make sure to name the second argument of the function explicitly. Now intentionally misspell the name of the second argument and look at the error message.

2. Now, do the same for calculating the mean; first do it correctly, then make an intentional mistake in the name of the argument.

3. Can you explain the difference in results?

# Bonus: Looking Inside Functions {#functions2}

## Looking Inside Functions

Creating a simple function manually, to understand how functions work.

# Objects revisited {#objects}

Discussion how objects and classes are used for function output. How then functions appear to act differently on different types of objects (e.g. `plot()`).

# Packages {#packages}

Explaining the philosophy of the package management system. Discussion of how to find good packages.




